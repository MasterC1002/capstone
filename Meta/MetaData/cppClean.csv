created_utc	id	title	author	ups	downs	num_comments	selftext	subreddit_id	is_self
1313217913.0	jhiyb	We have an international standard: C++0x is unanimously approved	tita75	161	14	12		t5_2qi27	False
1366393551.0	1cor7b	Clang is C++11 Feature Complete	Poita_	152	18	60		t5_2qi27	False
1335258116.0	sppna	I had a C++ interview, here are some questions	cppinterview	133	19	156	"Hello all, 

I had a C++ phone screen and I thought some people might be interested in seeing the questions that were asked. Here they are:

If you could change one thing about the C++ language, what would you change and why? What are some limitations of c++?

Could you explain to me how virtual functions work? and why you would use them?

What is the overhead of calling a virtual function?

Are there any situations when this overhead is larger or smaller?

When should you make a destructor virtual?

Could you explain to me the difference between static_cast and dynamic_cast?

How would you implement a class that opens two files if you could not use exceptions?

How would you implement that class with two files using exceptions?

How would you handle one of the files failing to open in the case where you have exceptions?

Could your constructor throw an exception after one of the files had been opened and the 2nd one failed? Which destructors would be called in this case? (assumes use of RAII for file handling (which is how I answered the previous questions))

How would you find the 10 most used words used in a large text file (which was a novel)? file -&gt; words -&gt; hashmap&lt;string word, int count&gt; -&gt;keep track of top 10 using a vector


"	t5_2qi27	True
1287628474.0	du62n	Reading a line, converting to ints	TaylorR137	132	38	231	"I have a frustration I could use some help with. 

I'm reading a line from an input.ini file. I need to check and see if the first character is a *, and if not read two integers.

Here is a sample input.ini:

*Some sort of comment

42 102

It seems I should use getline and check if the first character is *, and if not assign the two integers, but I'm having trouble converting the string into two integers.

for example:


ifstream infile(""input.ini"");
string s;
int N1, N2;

getline(infile, s);

if (s[0]!='*'){
  s &gt;&gt; N1 &gt;&gt; N2;
}



This obviously won't work, but you get the idea. Thanks!"	t5_2qi27	True
1370018259.0	1feuii	GCC 4.8.1 Released: The First C++11 Feature-Complete Compiler	tgockel	107	13	10		t5_2qi27	False
1343803615.0	xhtqi	Nokia lays off Qt3D, QtDeclarative (QML), QtMultimedia, CI/QA and other teams	berium	86	7	53		t5_2qi27	False
1359660460.0	17n92d	C++ Grandmaster Certification	cmeerw	99	26	41		t5_2qi27	False
1318242204.0	l6xni	Deep C (and C++)	cmeerw	92	16	44		t5_2qi27	False
1368462400.0	1e92p1	The C++ Programming Language (4th Ed) now in print.	dzjay	86	14	24		t5_2qi27	False
1360073079.0	17xkk5	(-2147483648&gt; 0) returns true in C++	cruise02	92	16	19		t5_2qi27	False
1285569797.0	djd8g	I can't believe I haven't seen this before: C# is C++++	ehamberg	113	40	14		t5_2qi27	False
1370614696.0	1fv215	No more C++ 11 updates for Visual Studio 2012.	mttd	90	21	92		t5_2qi27	False
1367175028.0	1daahc	GCC 4.9 new feature: colourized output	bstamour	82	12	23		t5_2qi27	False
1355926991.0	153xvn	Qt 5.0 released	milliams	86	15	18		t5_2qi27	False
1352900491.0	136hny	C/C++ is still the only way to have high performance on Mobiles	Andrey_Karpov_N	92	18	29		t5_2qi27	False
1375758324.0	1jscfk	Boost C++ Libraries: removing all support for old compilers? [RFC]	mttd	75	9	25		t5_2qi27	False
1372856179.0	1hkb8z	Qt 5.1 released	meetingcpp	80	8	6		t5_2qi27	False
1361247004.0	18sqsa	C++11's six dots	lbrandy	82	14	9		t5_2qi27	False
1338462609.0	udp6d	Results of the May 2012 User Survey for the /r/cpp Community	stormblaast	78	9	20		t5_2qi27	False
1372699682.0	1hfrba	Boost 1.54.0 released!	mttd	75	8	10		t5_2qi27	False
1330223711.0	q67p1	The best aspect of template programming	roflmaoff	83	21	42		t5_2qi27	False
1339176430.0	uruns	Microsoft relents and will give the community Visual Studio Express for Desktop Applications.	ZMeson	81	17	17		t5_2qi27	False
1336915764.0	tkxf7	C++11 for everybody [PDF]	cmeerw	80	15	16		t5_2qi27	False
1372454057.0	1h9uq7	C++11/14 STL Features, Fixes, And Breaking Changes In VS 2013	STL	73	10	56		t5_2qi27	False
1353616805.0	13mvwc	On vector&lt;bool&gt;	milliams	78	14	22		t5_2qi27	False
1348096304.0	105uwd	Rule of Zero	rmartinho	75	10	6		t5_2qi27	False
1248085949.0	92rt4	The Removal of Concepts From C++0x	TrueTom	68	8	20		t5_2qi27	False
1327735131.0	p0a3h	Please direct (entry level) questions to stack overflow.	aestheticreddit	92	37	29	"Morning, folks! 

tl;dr: Signal to noise is getting low. Can we do something about it?

Lets get down to business. /r/cpp isn't a huge subreddit. Of late, we've had a higher-than-normal percentage of ""help me, I'm new"" posts. I'm very supportive of new cpp programmers looking for answers to their questions, however, I feel that posting these questions to /r/cpp is misplaced, especially since it is such a (relatively) small community. I vote that these sorts of posts to /r/cpp should be discouraged in general and redirected to a site more suited to helping people with questions, such as stackoverflow.com. Anecdotally, per-capita, users are much more likely to find real answers to their questions about c++ on stack overflow than reddit, by design.

Reddit's original purpose was as a news aggregation website. I know that, over the years, this intention has become just that, only an intention, and that reddit has outgrown this to become a sort of community. I support the community aspect as well, in the general sense. However, I feel that straying too far from this original intention is detrimental to reddit as a whole, and that /r/cpp has strayed or will stray too far.

Take /r/hardware (28.5k redditors subscribed), /r/tech (5280 redditors subscribed) and /r/networking/ (6930 redditors subscribed), for example. These are what I would consider only slightly pathological cases of where this behavior can and likely will go. 

86/100, 93/100, and 84/100 of the posts on my version of their front pages are to self.hardware, self.tech, and self.networking, respectively. These posts aren't news. These posts aren't community. This is abuse. Most of these posts have less than 10 replies, and since this is still reddit, how many of those are acutal answers to the OP's question? I don't even mean the silly memes and youtube-style comments. Most of these replies are baseless opinions that serve only to increase the noise-to-signal ratio. They do not help the OP. IMHO, this is unacceptable, and this is where /r/cpp will end up without moderation.

As a community and as a news aggregation website, how do you folks feel about redirecting these post to where they're more useful, such as stack overflow?
"	t5_2qi27	True
1364830980.0	1bfeov	Ten C++11 Features Every C++ Developer Should Use	meetingcpp	75	18	13		t5_2qi27	False
1336484086.0	tcw8d	GCC can now be built with a C++ compiler	berium	66	9	31		t5_2qi27	False
1326992136.0	ongkc	Publisher Pearson's support for SOPA puts Josuttis' The C++ Standard Library 2nd Edition at risk (as well as books from other authors).	arturoman	62	5	7		t5_2qi27	False
1356340853.0	15d9ig	C++11 overview	innochenti	72	15	18		t5_2qi27	False
1315063868.0	k3k5q	ISO/IEC 14882:2011 aka C++11 published	misuo	59	4	8		t5_2qi27	False
1352132909.0	12o8fc	Boost Version 1.52.0 released	Masfo	67	9	14		t5_2qi27	False
1307383858.0	ht0x2	C++ clear winner in Google language tests	expertvoice	63	10	24		t5_2qi27	False
1288059921.0	dwea8	EA open sources their internal version of STL 	rexxar	64	10	16		t5_2qi27	False
1359819619.0	17r7uk	"B-Tree Containers Google's STL-like container - ""C++ Containers That Save Memory And Time"""	miguelishawt	67	9	1		t5_2qi27	False
1352608444.0	12zw1u	Memoization in C++11	ddrcoder	61	8	15	"[This post](http://www.reddit.com/r/cpp/comments/12yqn9/lazy_evaluation_in_c11/) got me thinking about a the best way to implement **memoize**, a higher order function to memoize any other function. I thought I'd share it:

    template&lt;class I, class O&gt;
    function&lt;O(I)&gt; memoize(function&lt;O(I)&gt; f) {
        // Keep copies in the map of parameters passed as references
        map&lt;typename std::decay&lt;I&gt;::type, O&gt; memos;
        return [=](I i) mutable -&gt; O {
            auto it = memos.lower_bound(i);
            if (it == memos.end() || it-&gt;first != i)
                it = memos.insert(it, make_pair(i, f(i)));
            return it-&gt;second;
        };
    };

    int main(int argc, char** argv) {
        function&lt;long(const int&amp;)&gt; fib;
        fib = [&amp;](const int&amp; n) -&gt; long {
            return n &lt; 2 ? n : fib(n - 1) + fib(n - 2);
        };
        fib = memoize(fib);
        for (int i = 0; i &lt; 100; ++i) {
            cout &lt;&lt; i &lt;&lt; "": "" &lt;&lt; fib(i) &lt;&lt; endl;
        }
        return 0;
    }

The map is *copied* into the closure, where it is mutated to record new results (only allowed by the use of the **mutable** modifier). Note that thread safety isn't addressed here, but could trivially be added.

EDIT: Improved map access efficiency (@CaptainCrowbar, added better support for reference parameters)."	t5_2qi27	True
1332426498.0	r8dyn	GCC 4.7.0 released, adds support for a number of C++11 features	berium	60	4	6		t5_2qi27	False
1306234619.0	hit0q	C++ at Google: Here Be Dragons	gst	69	12	24		t5_2qi27	False
1271259378.0	bqu0v	GCC 4.5.0 released - adds new STL profiling mode and C++0x lambdas and futures	randombit	64	8	7		t5_2qi27	False
1270133685.0	bl7rc	Free Online Book: The Boost C++ Libraries	LongUsername	61	4	3		t5_2qi27	False
1371567125.0	1gl538	Bjarne Again: Hallelujah for C++ • The Register	mttd	60	8	9		t5_2qi27	False
1363230800.0	1a9gdk	C++11 compiler support shootout: Visual Studio, GCC, Clang, Intel	alexkorban	63	9	13		t5_2qi27	False
1329978098.0	q269i	Clang now supports lambda expressions	pmrsaurus	64	9	8		t5_2qi27	False
1325811101.0	o4q5u	Cheatsheet: new STL algorithms and containers in C++11	alexkorban	58	8	11		t5_2qi27	False
1375663704.0	1jplfw	What out there can help me to write better C++ code?	ricodued	61	11	56	"My decade of programming experience is mostly C# but for the last month or so in my free time I've been writing a game engine in C++/DirectX.

In C#, we have things like FxCop to alert you when you've written something against best practices, etc. Is there something like this for C++?

I'm using Visual Studio 2013, and having little previous C++ experience, my memory management skills are not exactly great, but VS will alert you in the output window when you've left objects alive, so that helps.

I don't really use any of the C++11 smart pointers right now (I'm much more focused on the DirectX bits of my engine working), but are they something you should be using whenever you create a pointer to something?

What about memory management within functions? e.g. if I create a std::ostringstream inside a function, do I need to delete it before the function returns? What effect do orphaned objects have on a running program other than increasing memory usage? I *assume* when a program exits with live objects they're cleaned up by the OS, so is it necessary to delete objects that are only ever dereferenced when the program exits (e.g., an ID3D11Device)?

Also, exceptions can be hard to decipher. Is there a way to somehow make them more useful?

Last but not least: When you write a function prototype in a header, you have to go back to the cpp and manually enter in the signature. Why doesn't Visual Studio update function sigs in the .cpp/.h file automatically? It doesn't seem like it's a difficult task so I'm wondering if there's a good reason this isn't implemented. It's always a massive pain-in-the-ass to me to create a new class because I end up writing more than I feel I need to. Is there an extension or something that will update the .cpp file to match the .h?

Thanks!

**EDIT:** Thanks for the responses, they've been immensely helpful. Apparently VS does have some static analysis tools in it, I'm going to check those out. 

**EDIT 2:** Either I've written really good code or the code analysis in VS2013 is not all that great. I had just three analysis results. I've seen a few commercial analysis tools but I think I'm just gonna stick with the built-in stuff."	t5_2qi27	True
1363968257.0	1aszj5	GCC 4.8 (finally...) released	meetingcpp	62	11	4		t5_2qi27	False
1363350309.0	1ach8f	Backward-cpp: a beautiful stack trace pretty printer for C++	cabbageturnip	66	14	16		t5_2qi27	False
1340891234.0	vqnfg	Boost version 1.50.0 released	glenfe	59	9	7		t5_2qi27	False
1334950281.0	sk6f5	"For anyone who has ever seen a declaration such as this ""double *(*(*p) (int) )(double **, char)"" here's a parser that explains in simple English. (x-post from /r/C_Programming)"	Stilvos	63	13	11		t5_2qi27	False
1309374034.0	icjxc	This is the best C++ Reference I've seen, but it could use a lot more contributions. Please help!	joehillen	58	5	10		t5_2qi27	False
1241880568.0	8j5fs	C++: new Foo vs. new Foo() 	gst	58	5	23		t5_2qi27	False
1372273192.0	1h4jx3	ReSharper to Support C++	wtf_apostrophe	59	11	9		t5_2qi27	False
1368117693.0	1e0d1m	GotW #1: Solution | Sutter’s Mill	mttd	57	10	4		t5_2qi27	False
1349798039.0	11782k	Scott Meyers: Universal References in C++11	cosmotriton	62	12	36		t5_2qi27	False
1344761509.0	y3622	A comparison of C++11 language support in VS2012, g++ 4.7 and Clang 3.1	alexkorban	58	9	25		t5_2qi27	False
1343760455.0	xgnqi	C++ reflection in under 100 lines of code	pfultz2	64	10	14		t5_2qi27	False
1304967649.0	h7isy	CPU Caches and Why You Care - Scott Meyers		56	7	6		t5_2qi27	False
1370958290.0	1g4bt4	Stephan T. Lavavej - Core C++, 9 of n | C9 Lectures: Stephan T. Lavavej - Core C++ // lambdas &amp; other expressions	mttd	52	4	14		t5_2qi27	False
1368301549.0	1e56wa	C++ Quiz (beta)	mttd	61	12	57		t5_2qi27	False
1363452434.0	1aeyhq	Three Optimization Tips for C++	randmaniac	67	17	7		t5_2qi27	False
1357035192.0	15rnfd	C++ and Beyond 2012: Herb Sutter - You don't know const and mutable	cmeerw	63	12	43		t5_2qi27	False
1355136999.0	14ll48	GCC 4.8 Has Automatic Return Type Deduction	milliams	57	5	22		t5_2qi27	False
1337732926.0	u064a	Clang 3.1 released	tompa_coder	56	6	11		t5_2qi27	False
1321433181.0	me7ic	"Library Vendors: No warnings please
"	ZMeson	65	11	16	"If you are library vendor, please make sure your code compiles with warning levels all the way up and with the 'treat warnings as errors' options on.  (If you don't, I hate you.)

If you have to use a 3rd party library and have to compile its code in your project, make sure the code compiles with warning levels all the way up and with the 'treat warnings as errors' options on.

I've had a very bad experience recently and feel the need to vent."	t5_2qi27	True
1241804707.0	8iyjr	Iterators Must Go! (in favor of ranges). Alexandrescu's talk at BoostCon	last_useful_man	52	5	11		t5_2qi27	False
1372020968.0	1gxeam	Why I’m quitting the C++ Grandmaster Certification course	grahamboree	68	21	46		t5_2qi27	False
1351331359.0	126260	The view from C++ Standard meeting, Oct 2012	cmeerw	55	5	3		t5_2qi27	False
1333258877.0	rnht1	MinGW Distro: GCC 4.7.0 and Boost 1.49.0 on Windows	STL	55	6	25		t5_2qi27	False
1319920983.0	lthrq	Elements of modern C++ style	tompa_coder	53	5	17		t5_2qi27	False
1308594213.0	i4ixh	The Biggest Changes in C++11 (and Why You Should Care)	expertvoice	58	8	20		t5_2qi27	False
1363441304.0	1aepc3	"why ""this"" sometimes doesn't equal ""this"""	milliams	58	10	11		t5_2qi27	False
1359901189.0	17t235	C++11: A cheat sheet&amp;amp;#8212;Alex Sinyakov	nilukush	60	8	15		t5_2qi27	False
1326215252.0	ob08j	Map of C++	arvarin	74	24	16		t5_2qi27	False
1290225330.0	e8z7t	Boost v1.45 released	eric_niebler	50	3	3		t5_2qi27	False
1247043596.0	8z8a2	How much boost does a C++ newbie need?	gst	55	7	13		t5_2qi27	False
1353966674.0	13u1s4	Why I like the new C++	amyrit	55	12	26		t5_2qi27	False
1340791709.0	vog1p	A commonly unknown std::vector pitfall	Tagedieb	62	13	36	"This is a pitfall, that is not described in any C++ documentation or the C++ standard documents (including the most recent C++11 standard): when inserting elements to a vector using either insert() or push_back(), you should never pass a reference to an element from that vector. Casually, that could look like the following:

    v.push_back(v.front() );

Now, the documentation of vector often says that push_back and insert invalidate iterators (in case you don't watch capacity()). That could already give a hint, though the same applies to a C++11 unordered_multimap/set, but those explicitly *don't* invalidate references.

How ever that might be, I've seen code like the above a few times now, and also written it myself, so that I think it should be pointed out more clearly.

The details are as follow:

In case of the vector ""running over"", it will be reallocated, which means that a new buffer is allocated, the existing items are copied over and the old buffer is then deallocated. At that time, the reference will be invalid. Now, there are 2 cases:

1. The value object has a destructor that does some real cleanup, making the element invalid. In this case you are guaranteed to get a problem sooner or later, unless you somehow have code that by ""accident"" never calls the problematic push_back/insert in the moment a reallocation is needed.

2. The value object is some kind of plain data, that is just ""abandoned"". In this case it is even more complicated: Since the buffer will be deallocated and then read, it will perform an invalid read operation. Now it depends on the platform, what exactly happens. To make a long story short, since modern platforms feature an MMU, this could raise an exception. Or you could be ""lucky"", that the standard library or OS is a little slower, which means that you will be allowed one more time to read the data even after deallocation.

In case of insert, the same problem can happen as described above, or even without reallocation: If the value you want to copy is on/after the insert position, you will either read the wrong value or a deconstructed value.

So this is it. Maybe all of this is completely clear to you and you would never make such a mistake. But my experience shows that this error can be made more easily, especially in case of push_back(), because you never even use an iterator, so the warning that iterators get invalidated seems to not apply to this case. It is especially nasty, because there are possible combinations where it is literally impossible to reproduce the problem on your development machine, but it will randomly crash on some other machine, maybe only once in a while.

EDIT: this also applies to std::deque and its push_front() function.

UPDATE: It looks like this is not an oversight in the language, but a bug in a certain STL implementation, [details](http://www.reddit.com/r/cpp/comments/vog1p/a_commonly_unknown_stdvector_pitfall/c56o7f1)."	t5_2qi27	True
1274401863.0	c6id8	Clang++ Builds Boost	last_useful_man	55	5	4		t5_2qi27	False
1375236507.0	1je63e	Reversing Bits in C	mttd	54	7	4		t5_2qi27	False
1374500414.0	1it7dk	Khronos Releases OpenGL 4.4 - Official feedback thread	mttd	52	5	33		t5_2qi27	False
1367346355.0	1dfcuz	SFML (Simple and Fast Multimedia Library) 2.0 officially released!	mttd	51	5	12		t5_2qi27	False
1339436035.0	uwfb0	C++11 in Qt5	milliams	58	13	8		t5_2qi27	False
1304523561.0	h420i	C++ Programming with QT4 (1st edition) legally available	ysangkok	49	3	2		t5_2qi27	False
1302494615.0	gn4sr	C++ - The fastest hunk of junk in the galaxy	sien	91	43	19		t5_2qi27	False
1258636641.0	a60zy	Next permutation — When C++ gets it right	gst	55	9	1		t5_2qi27	False
1366827288.0	1d0wh9	Practical x64 Assembly and C++ Tutorials	psup	55	9	4		t5_2qi27	False
1357772109.0	169zda	Stroustrup’s Tour of C++: Third chapter posted	mttd	52	6	0		t5_2qi27	False
1351790231.0	12gsme	C++14 | ROOT	milliams	57	13	24		t5_2qi27	False
1346326903.0	z2mkw	Qt 5 Beta Released	JRepin	55	8	1		t5_2qi27	False
1286345887.0	dnge5	Clang 2.8 released, claims complete support for C++ x98 &amp; x03	berium	50	2	6		t5_2qi27	False
1368521400.0	1eayxe	Reserving 4GB of virtual memory per std::vector to avoid reallocations	ocello	53	10	45		t5_2qi27	False
1310463481.0	in9x9	Boost v1.47.0	Masfo	54	11	13		t5_2qi27	False
1294235359.0	ewl6m	Are C++ iostreams really slow?	gst	52	11	17		t5_2qi27	False
1292851217.0	eoqz2	What are your favorite C++ blog feeds? Lets trade.		51	9	19	"Here are mine in no order:

Alf on programming (mostly C++)
http://alfps.wordpress.com/feed/ 

Articles published in The C++ Source
http://www.artima.com/cppsource/feeds/cppsource.rss 

ASKLDJD
http://askldjd.wordpress.com/feed/ 

C++
http://www.reddit.com/r/cpp/.rss 

C++ on a Friday
http://blog.knatten.org/feed/ 

C++ Truths
http://feeds.feedburner.com/CppTruths 

C++Next
http://cpp-next.com/feed/ 

C/C++ Cafe
https://www.ibm.com/developerworks/mydeveloperworks/blogs/roller-ui/rendering/feed/5894415f-be62-4bc0-81c5-3956e82276f3/entries/atom?lang=en 

Channel 9 - Entries tagged with C++
http://channel9.msdn.com/Tags/c++/RSS 

cplusplus.co.il
http://cplusplus.co.il/feed/ 

DevX: Latest C++ Content
http://services.devx.com/outgoing/cplusfeed.xml 

Dr.Dobb's C++ Articles
http://www.ddj.com/rss/cpp_news.xml 

Dr.Dobb's Journal | Andrew Koenig Blog
http://www.drdobbs.com/blog/main/movabletype/rss_andrewkoenig.xml 

Dr.Dobb's Journal | Walter Bright Blog
http://www.drdobbs.com/blog/main/movabletype/rss_walterbright.xml 

Geektalk
http://olvemaudal.wordpress.com/feed/ 

Generalities &amp; Details: Adventures in the High-tech Underbelly
http://www.bluebytesoftware.com/blog/SyndicationService.asmx/GetRss 

Gennaro Prota's Blog
http://gennaroprota.wordpress.com/feed/ 

Going Deep - Channel 9
http://channel9.msdn.com/Shows/Going+Deep/RSS 

Igor Ostrovsky Blogging
http://feeds.feedburner.com/igoro 

InformIT :: C++ Reference Guide
http://www.informit.com/guides/guide_rss.aspx?g=cplusplus 

InformIT :: Danny Kalev
http://www.informit.com/authors/authorblog_rss.aspx?a=e19aded6-574c-4c46-8511-101f9f0ed8f8 

Just Software Solutions Blog
http://www.justsoftwaresolutions.co.uk/index.rss 

Lambda the Ultimate - Programming Languages Weblog
http://lambda-the-ultimate.org/rss.xml 

Programming in the 21st Century
http://prog21.dadgum.com/atom.xml 

Sutter's Mill
http://herbsutter.wordpress.com/feed/ 

Visual C++ Team Blog
http://blogs.msdn.com/b/vcblog/rss.aspx 

Bartosz Milewski's Programming Cafe
http://bartoszmilewski.wordpress.com/feed/ 
"	t5_2qi27	True
1268512499.0	bd12m	What are the favorite IDEs people are using for C++?	dsafsas	46	0	104	"I haven't touched C++ since college, and then I only ever used Visual Studio.  I'd like to freshen my skills with some personal app development, and am considering what to use.  Currently I'm thinking either the Eclipse plugin, or Dev C++.

So what do you like?  Or does everyone here use emacs?"	t5_2qi27	True
1373569244.0	1i3ld2	Qt Creator 2.8.0 released	meetingcpp	49	8	6		t5_2qi27	False
1371472867.0	1gig0k	C++11 The Future is Here // ACCU 2013 Keynote, Bjarne Stroustrup	mttd	49	6	15		t5_2qi27	False
1364174941.0	1ay3wj	Just spent today putting this together, and I think it's ready for critique. I give you, my Makefile.	chpatton013	65	24	10		t5_2qi27	False
1359577384.0	17kxnt	Effective C++11: Content and Status	cmeerw	49	7	0		t5_2qi27	False
1355393950.0	14s2hj	Stroustrup on next-gen C++: I didn't want to let go of my baby	Eoinoc	62	23	2		t5_2qi27	False
1335480784.0	suc70	Functional Programming in C++	the-fritz	51	7	10		t5_2qi27	False
1318312796.0	l7zut	ISO C++11 Published	berium	47	8	10		t5_2qi27	False
1283431628.0	d8nt6	The Most Important C++ Non-Book Publications...Ever	rexxar	52	9	2		t5_2qi27	False
1275342079.0	ca0st	It is now ok to use C++ in GCC source code	berium	50	4	14		t5_2qi27	False
1375008358.0	1j7l1x	Contextually converted to bool	ChrisSharpe	47	8	2		t5_2qi27	False
1366035017.0	1ce126	LLVM - C++11 Migration Tool Status	meetingcpp	53	11	5		t5_2qi27	False
1364886794.0	1bi3lf	Re-checking the ReactOS project - a large report	Andrey_Karpov_N	49	7	2		t5_2qi27	False
1362857069.0	19zex3	Runtime-Compiled C++	meetingcpp	56	15	30		t5_2qi27	False
1361578769.0	191xaa	[Phoronix] LLVM's Clang Compiler Nearly C++11 Feature Complete	vinipsmaker	54	10	9		t5_2qi27	False
1361308871.0	18uazg	Last.fm releases moost, its Music Information Retrieval team's C++ library	mttd	51	7	7		t5_2qi27	False
1348649953.0	10hyvw	Modules in C++ 	elperroborrachotoo	51	10	25		t5_2qi27	False
1289257832.0	e35qr	Compiler Benchmarks Of GCC, LLVM-GCC, DragonEgg, Clang	eric_niebler	46	4	1		t5_2qi27	False
1241434355.0	8hnxs	Boost 1.39.0 released	joaquintides	50	6	8		t5_2qi27	False
1234253247.0	7w7oj	Boost 1.38.0 released	joaquintides	47	7	6		t5_2qi27	False
1370172125.0	1fij8j	libcppa： an LGPL C++11 actor model implementation featuring lightweight &amp; fast actor implementations, pattern matching for messages, network transparent messaging, and more.	lingua_franca	48	8	3		t5_2qi27	False
1363277578.0	1aahcc	Words of wisdom: Bjarne Stroustrup	mttd	45	6	1		t5_2qi27	False
1362486064.0	19pbn2	Living without polymorphism: The importance of std::function	marton78	49	8	24		t5_2qi27	False
1360003567.0	17vokh	Boost 1.53.0 released	glenfe	51	10	11		t5_2qi27	False
1355748770.0	14zp4y	Stupid Name Lookup Tricks for C++11	cloderic	50	8	26		t5_2qi27	False
1345644082.0	ymyjb	Stephan T. Lavavej - Core C++, 4 of n (Virtual Functions)	cosmotriton	45	2	9		t5_2qi27	False
1343162080.0	x3bqg	Doom 3 Vtable Trick	sausagefeet	53	11	26	"Hello, I'm checking out the Doom 3 Code Review here (http://fabiensanglard.net/doom3/index.php) and came across this part:

&gt;Trivia : idTech4 high level objects are all abstract classes with virtual methods. This would normally involves a performance hit since each virtual method address would have to be looked up in a vtable before calling it at runtime. But there is a ""trick"" to avoid that. All object are instantiated statically on the heap as follow:

        
        
    idCommonLocal    commonLocal;                   // Implementation
    idCommon *       common = &amp;commonLocal;         // Pointer for gamex86.dll
        
        
&gt;Since an object allocated on the heap has a known type the compiler can optimize away the vtable lookup. The interface pointer is used during the handshake so doom3.exe can exchange objects reference with gamex86.dll. 


I don't really understand how this actually optimizes the vtable lookups away.  Could someone shed some light on it for me?  Thank you."	t5_2qi27	True
1339831745.0	v4rc2	Boost 1.50.0 beta	Masfo	51	8	2		t5_2qi27	False
1282025050.0	d20te	Version 1.44.0	ManicQin	42	1	3		t5_2qi27	False
1371521265.0	1gk4e8	LLVM and Clang 3.3 Released	kungfubanana	45	6	15		t5_2qi27	False
1342610940.0	wr68y	Modern source code to study?	stesch	48	9	68	Which open source project would you recommend to study nicely written code? I don't expect C++11, just something that isn't from a 10 years old Dummies book. 	t5_2qi27	True
1321377332.0	md92j	Boost 1.48.0	Masfo	45	9	11		t5_2qi27	False
1312856351.0	jd2a3	New in C++0x: Smart pointers, lambda expressions, moving data w/out copying (Andy Koenig) [x/post]	neutronbob	42	3	5		t5_2qi27	False
1230973861.0	7n3yd	Performance: C# vs C++	gst	53	11	35		t5_2qi27	False
1375435475.0	1jjzw6	15 Sorting Algorithms in 6 Minutes	meetingcpp	53	15	6		t5_2qi27	False
1355162930.0	14m52o	C++ and Beyond 2012: Andrei Alexandrescu - Systematic Error Handling in C++	lbrandy	49	9	21		t5_2qi27	False
1354603768.0	1491ls	Perspective: “Why C++ Is Not ‘Back’”	cmeerw	56	21	13		t5_2qi27	False
1351889598.0	12j71g	"Visual C++: Announcing November CTP of the C++ compiler, now 
with more C++11"	cmeerw	50	13	16		t5_2qi27	False
1340113902.0	v9xlf	Efficient argument passing in C++11, Part 1	berium	49	7	19		t5_2qi27	False
1316786781.0	kp1wo	"Koenig about ""auto"" keyword"	tompa_coder	45	4	24		t5_2qi27	False
1301318047.0	gd3y2	C++0x will be C++ 2011 	gst	44	5	3		t5_2qi27	False
1264444656.0	au04i	C++/Tk - operator overloading misuse at its finest.	the-fritz	48	6	3		t5_2qi27	False
1243557826.0	8o2qx	Thrust: A high-level C++ template library for CUDA 	elq	42	0	3		t5_2qi27	False
1375832007.0	1juhlu	GoingNative day 1 and 2 talks announced : Standard C++	balkierode	43	2	0		t5_2qi27	False
1372550711.0	1hc63v	Native Code Performance and Memory: The Elephant in the CPU | Build 2013	mttd	44	6	6		t5_2qi27	False
1371764659.0	1gr6rx	“constexpr” function is not “const” | Andrzej's C++ blog	mttd	48	10	10		t5_2qi27	False
1371265559.0	1gdpn1	"Stabilizer: Rigorous Performance Evaluation // ""Performance impact of -O3 over -O2 optimizations [on SPEC CPU2006] indistinguishable from random noise."""	mttd	45	9	3		t5_2qi27	False
1366970158.0	1d58se	Overview &amp; code samples of changes accepted for C++14	bobo-obob	42	4	29		t5_2qi27	False
1366129835.0	1cgwht	Tracey is a lightweight C++11 memory leak finder	r-lyeh	44	4	26		t5_2qi27	False
1362561678.0	19rn4v	A faster implementation of std::function	marton78	41	5	10		t5_2qi27	False
1343142775.0	x2qh8	Using likely() and unlikely()	danadam	47	8	13		t5_2qi27	False
1330692974.0	qeemk	post-C++11: Call for Library Proposals	cmeerw	38	2	67		t5_2qi27	False
1304583888.0	h4op3	Microsoft thinks native C++ has big future	berium	48	9	38		t5_2qi27	False
1301175299.0	gc5dc	GCC 4.6 released, adds more C++0x features: nullptr, noexcept, opaque enums, and more	GuyWithPants	40	0	3		t5_2qi27	False
1299004802.0	fv7lu	"TIL about ""The Most Important Const"""	StackedCrooked	43	3	6		t5_2qi27	False
1267708273.0	b95xi	Faster meta-programs using gcc 4.5 and C++0x	mebrahim	40	6	1		t5_2qi27	False
1265271439.0	axws7	Boost release 1.42.0 available	joaquintides	39	2	4		t5_2qi27	False
1252341898.0	9i5h6	Why C++ doesn't have reflection.		44	5	13		t5_2qi27	False
1249933467.0	99bvk	C++ Intellisense in VS2010	jfire6	46	9	16		t5_2qi27	False
1245987894.0	8vs80	Program for Android in C/C++ with the Native Development Kit (if you dare) 	gst	39	2	0		t5_2qi27	False
1368713880.0	1eg9cr	C++14 Committee Draft Posted	sdeetee	41	5	0		t5_2qi27	False
1355842714.0	151xhz	An implementation of Generic lambdas (clang).	SplinterOfChaos	42	9	9		t5_2qi27	False
1339730541.0	v2uls	C++11: a visual summary of the additions and changes since C++03	alexkorban	50	13	3		t5_2qi27	False
1339054796.0	upgw6	The proper way to call std::swap	dscharrer	52	15	14		t5_2qi27	False
1333001590.0	riw00	Get to Know the New C++11 Initialization Forms	Andrey_Karpov_N	42	6	4		t5_2qi27	False
1320045385.0	luxxg	A list of RSS C++ blogs	evgred	43	8	11	"A list of RSS C++ blogs was [published](http://www.reddit.com/r/cpp/comments/eoqz2/what_are_your_favorite_c_blog_feeds_lets_trade/) a year ago on Reddit.

I checked them and removed links to those blogs that had not been
updated for more than half a year, and added some new links. This is
the updated list: 

* C++ Reddit http://www.reddit.com/r/cpp/.rss
* ASKLDJD http://askldjd.wordpress.com/feed/
* C++ on a Friday http://blog.knatten.org/feed/
* C++ Truths http://feeds.feedburner.com/CppTruths
* C++Next http://cpp-next.com/feed/
* C/C++ Cafe https://www.ibm.com/developerworks/mydeveloperworks/blogs/roller-ui/rendering/feed/5894415f-be62-4bc0-81c5-3956e82276f3/entries/atom?lang=en
* Channel 9 - Entries tagged with C++ http://channel9.msdn.com/Tags/c++/RSS
* DevX: Latest C++ Content http://services.devx.com/outgoing/cplusfeed.xml
* Dr.Dobb's C++ Articles http://www.ddj.com/rss/cpp_news.xml
* Geektalk http://olvemaudal.wordpress.com/feed/
* Generalities &amp; Details: Adventures in the High-tech Underbelly http://www.bluebytesoftware.com/blog/SyndicationService.asmx/GetRss
* Gennaro Prota's Blog http://gennaroprota.wordpress.com/feed/
* Going Deep - Channel 9 http://channel9.msdn.com/Shows/Going+Deep/RSS
* Igor Ostrovsky Blogging http://feeds.feedburner.com/igoro
* InformIT :: C++ Reference Guide http://www.informit.com/guides/guide_rss.aspx?g=cplusplus
* InformIT :: Danny Kalev http://www.informit.com/authors/authorblog_rss.aspx?a=e19aded6-574c-4c46-8511-101f9f0ed8f8
* Just Software Solutions Blog http://www.justsoftwaresolutions.co.uk/index.rss
* Static Analysis blog - http://feeds.feedburner.com/viva64-blog-en
* Lambda the Ultimate - Programming Languages Weblog http://lambda-the-ultimate.org/rss.xml
* Programming in the 21st Century http://prog21.dadgum.com/atom.xml
* Herb Sutter's Mill http://herbsutter.com/feed/
* Visual C++ Team Blog http://blogs.msdn.com/b/vcblog/rss.aspx
* Bartosz Milewski's Programming Cafe http://bartoszmilewski.wordpress.com/feed/
* ACCU C Vu Journal http://accu.org/index.php/articles?theme=rss
* Word Aligned tales from the code face http://feeds.wordaligned.org/wordaligned
* Blog of Boris Kolpackov -  http://codesynthesis.com/~boris/blog/feed/
* С++ Soup! - http://cplusplus-soup.com/feed/
* Jim Beveridge: http://qualapps.blogspot.com/feeds/posts/default?alt=rss
* Ofek's VC++ stuff (Ofek Shilon): http://thetweaker.wordpress.com/feed/
* Harder, Better, Faster (Steven Pigeon): http://hbfs.wordpress.com/feed/
* EmptyCrate - http://blog.emptycrate.com/node/feed
* Anthony C. Hay. How to Write a Program  - http://howtowriteaprogram.blogspot.com/feeds/posts/default
* Marius Bancilas Blog - http://mariusbancila.ro/blog/feed/

Also this is a good blog without RSS:
The Visual C++ Weekly http://paper.li/visualc/news
"	t5_2qi27	True
1318916038.0	lg0e1	The following table lists C++0x features and their support in popular compilers.	evgred	42	5	2		t5_2qi27	False
1314196566.0	jsw5f	Hail the return of native code and the resurgence of C++	expertvoice	46	11	21		t5_2qi27	False
1290967007.0	ecx3k	Lisp interpreter in 90 lines of C++	gst	47	10	8		t5_2qi27	False
1279822670.0	csk7a	You cant be a good C++programmer without reading a few best practices books		49	10	43	"Sorry about the hyperbole.. .

I wanna find out if your expericnce of working as a C++ programmer is anything like mine.

I have changed jobs lots mostly because I got stuck working in messy code bases. The  people I worked with have not been interested in reading any of the C++ best practices books. Its like, you learn the syntax when you are in school and that's pretty much all there is to C++.

I think being a good c++ programmer isn't about memorizing syntax, but knowing how to write clean, maintainable, efficient, and safe code. And that is something you just wont learn in the trenches, no matter how long you have been there, but something you have to pick up by studying best practices books.

It seems to me there is mostly low quality code out there, and not so good C++ programmers. I have not seen much of that *Effective C++* or *Exceptional C++* type  code in the wild. Its a bit depressing really. I wont pretend I always write good code, or that I remember all the patterns, best practices and gotchas. But I know what ugly code looks like and always trying to improve by studying the books.

**So I got a few questions: Do you think being a good C++ programmer means reading lots of C++ books? Do you think most C++ code out there is ugly and most C++ programmers are a bit bad. What is your experience?**

The reason I'm asking is because I'm changing jobs again.. but it will probably just be more of the same. Is all companies like this? Or is there some industry or some types of companies that care more about code quality than others?

Some definitions:

*Good code* as in: RAII, exception safety, small interfaces, short methods, STL algorithms, unit tests, data hiding, composition before inheritance, do-as-the-int's, mixins, pimpl's, patterns etc..

*Bad code* as in: huge classes, big nested functions, copy paste spaghetti code, C style code (polymorfism by void pointers, casting, and type switches), goto, reiventing wheels, macros, global variables, etc

What type of C++ books am I talking about here? Well here is a list of the ones I have read (Herb Sutters books are my favorites, but Scott Meyers books are probably a better place to start) :

- *Exceptional C++: 47 Engineering Puzzles, Programming Problems, and Solutions*
by Herb Sutter

- *More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions*
by Herb Sutter

- *Exceptional C++ Style: 40 New Engineering Puzzles, Programming Problems, and Solutions*
by Herb Sutter

- *Effective STL: 50 Specific Ways to Improve Your Use of the Standard Template Library*
by Scott Meyers

- *C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond*
by David Abrahams

- *Imperfect C++: Practical Solutions for Real-Life Programming*
by Matthew Wilson

- *C++ Templates: The Complete Guide*
by David Vandevoorde, Nicolai M. Josuttis

- *Refactoring: Improving the Design of Existing Code*
by Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts

- *Design Patterns: Elements of Reusable Object-Oriented Software*
by Erich Gamma, Richard Helm, Ralph Johnson, John M. Vlissides

- *The C++ Standard Library: A Tutorial and Reference*
by Nicolai M. Josuttis

- *Essential C++*
by Stanley B. Lippman

- *Inside the C++ Object Model*
by Stanley B. Lippman

- *Ruminations on C++: A Decade of Programming Insight and Experience*
by Andrew Koenig, Barbara E. Moo

- *Accelerated C++: Practical Programming by Example*
by Andrew Koenig, Barbara E. Moo

- *C++ Gotchas: Avoiding Common Problems in Coding and Design*
by Stephen C. Dewhurst

- *C++ Common Knowledge: Essential Intermediate Programming*
by Stephen C. Dewhurst

- *The Design and Evolution of C++*
by Bjarne Stroustrup

- *Modern C++ Design: Generic Programming and Design Patterns Applied*
by Andrei Alexandrescu

- *More Effective C++: 35 New Ways to Improve Your Programs and Designs*
by Scott Meyers

- *Effective C++: 55 Specific Ways to Improve Your Programs and Designs*
by Scott Meyers

- *C++ Coding Standards: 101 Rules, Guidelines, and Best Practices*
by Herb Sutter, Andrei Alexandrescu

Edit: The template metaprogramming books.. they are just for fun, use at own risk.."	t5_2qi27	True
1273342226.0	c1iv1	Boost 1.43 out - 2010-05-06	last_useful_man	42	8	1		t5_2qi27	False
1367523910.0	1dkk8m	PostgreSQL -- Moving to C++? // Peter Eisentraut's Blog	mttd	48	13	22		t5_2qi27	False
1366487328.0	1craw1	Trip Report: ISO C++ Spring 2013 Meeting // Sutter’s Mill	mttd	43	9	26		t5_2qi27	False
1364741266.0	1bcy0u	TIL C++11: Stop declaring empty destructors!	Jonkel	52	20	18		t5_2qi27	False
1360358834.0	185l48	Stroustrup’s Tour of C++: Fourth chapter posted // Standard C++	mttd	39	1	2		t5_2qi27	False
1351978006.0	12kyay	C++ coming back into the mainstream with more specs, more often | Ars Technica	ryantheboy	47	13	11		t5_2qi27	False
1345506301.0	yjuyu	Boost v1.51.0 released	Masfo	49	10	8		t5_2qi27	False
1344505543.0	xxkr7	Digia plans to acquire full Qt software technology and business From Nokia	kid-pro-quo	41	5	13		t5_2qi27	False
1322841309.0	mxlx4	LLVM/Clang 3.0 released, improves C++11 support	berium	42	7	1		t5_2qi27	False
1315914094.0	ke4ff	How do you use C++?	Ayjayz	45	11	40	"I have been developing in C++ for a few years now and over that time, I have been consistently evolving the way I code. The (rough) stages have been

* C style, very imperative and manually managing all memory (but with new's and deletes - I was never insane enough to use malloc/free!). C++ arrays and pointer arithmetic all over the place.
* Object orientation *everywhere*! The more layers of abstraction and the more virtual functions the better! In fact, let's make every function virtual!
* Full use of STL containers
* Function pointers and preprocessor used to allow me to never repeat code or logic more than once
* Mild use of templates to replace function pointers/preprocessor macros, but most program logic is still imperative
* Limited use of STL algorithms if ones a great fit, I don't have to write any custom functors and I don't run into too many scary error messages.
* (*current*) Full use of STL and boost libraries and custom generic extensions. Very very limited use of object orientated code, lots of use of functional style of coding. Extensive use of RAII and the various STL/boost classes to help (eg. shared_ptr) - I can't remember the last time I used delete!

How have your paths compared? Did you jump straight into the STL and boost? Do you consider anything more fancy than while loops and pointer arithmetic a waste of time?"	t5_2qi27	True
1290364093.0	e9jpp	C++ Hating	gst	49	14	37		t5_2qi27	False
1252475230.0	9iozx	Bjarne Stroustrup, Did You Really Say That?	publius_lxxii	46	12	2		t5_2qi27	False
1372125267.0	1h0dan	Two Years (and Thousands of Bugs) of Static Analysis	mttd	42	7	23		t5_2qi27	False
1368555309.0	1ebuhb	Monoid, Monad, and more in C++	abeark	40	9	18	"Long time lurker, first time poster here. For a while now, I've worked on a [re-implementation](https://github.com/beark/ftl) of a bunch of Haskell type classes, data types, and related functions in C++.

It basically started out as a simple ""just for fun""-experiment--to see how much was possible--but it proved interesting enough that I just kept adding to it.

The FTL (Functional Template Library), as I came to call the library, still does not cover all that much, but it does some of the basics fairly well (Monad, Monoid, Maybe, ...), I think. In fact, at this point I think some of the results are actually quite neat and might just be useful to someone.

Anyway, leaving it here because I feel the code has reached a stage where some outside input would be nice, and reddit seemed as good a place as any."	t5_2qi27	True
1344793283.0	y3mfi	A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World	Andrey_Karpov_N	41	7	1		t5_2qi27	False
1330369888.0	q8gbr	"Josuttis' ""The C++ Standard Library"", 2nd edition (with C++11) will be published after all in April, after resolving his SOPA issues with his publisher"	GuyWithPants	37	3	9		t5_2qi27	False
1311104118.0	iu3sc	The most useful features in C++0x (Andrew Koenig) [x/post]	neutronbob	36	1	20		t5_2qi27	False
1287753411.0	duvev	Tips on writing cross-platform C and C++ applications	berium	43	7	19		t5_2qi27	False
1287066092.0	dr652	Oct. 14, 1985: C++ Adds to Programming	azam3d	37	2	3		t5_2qi27	False
1270218876.0	bln2l	C++0x Final Committee Draft Published - Please Comment 	gst	43	6	3		t5_2qi27	False
1262090047.0	ajij0	What are you using for C++ unit testing?	jones77	37	4	16	"All thoughts welcome.  I'm investigating using one for work but can't really tell what they're like ...

cppunit is the no-brainer default:

* http://sourceforge.net/apps/mediawiki/cppunit/index.php?title=Main_Page

google's C++ testing framework looks interesting:

* http://code.google.com/p/googletest/

And you can plug a google C++ mocking framework in:

* http://code.google.com/p/googlemock/

There's a list here:

* http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.2B.2B

To a certain extent this guy has done the work for me:

* http://gamesfromwithin.com/exploring-the-c-unit-testing-framework-jungle

And his conclusion is cxxunit:

* http://cxxtest.tigris.org/"	t5_2qi27	True
1373928511.0	1idewo	A praise of size_t and other unsigned types	mttd	41	10	25		t5_2qi27	False
1373576955.0	1i3wr3	cereal - A C++11 library for serialization	mttd	35	2	11		t5_2qi27	False
1369933879.0	1fci2v	An interesting parallel: Pixar and C++ philosophy	nilukush	49	12	18		t5_2qi27	False
1366120466.0	1cgl16	How Non-Member Functions Improve Encapsulation | Dr Dobb's	balkierode	37	4	7		t5_2qi27	False
1365538609.0	1c0ghv	Wt, C++ Web Toolkit -- Release 3.3.0 (April, 8 2013)	mttd	44	11	17		t5_2qi27	False
1364463736.0	1b63nf	A look at C++ 14: Papers Part I	meetingcpp	41	9	29		t5_2qi27	False
1364069385.0	1avj5u	GCC and C vs C++ Speed, Measured.	mttd	50	15	7		t5_2qi27	False
1364069284.0	1avj2a	GCC's move to C++ [LWN.net]	mttd	43	8	2		t5_2qi27	False
1361818585.0	197ffz	What does the 'void()' in 'auto f(params) -&gt; decltype(…, void())' do?	machine_not_a_human	51	14	7		t5_2qi27	False
1356462815.0	15fiiq	Stephan T. Lavavej - Core C++ , 7 of n - Usual Arithmetic Conversions, Template Metaprogramming	cosmotriton	42	7	14		t5_2qi27	False
1355279948.0	14pb3t	dlib: a C++ library for developing portable applications dealing with networking, threads, graphical interfaces, data structures, linear algebra, machine learning, XML and text parsing, numerical optimization, Bayesian nets, and numerous other tasks.	lingua_franca	44	14	36		t5_2qi27	False
1354557395.0	147kqf	C++ benchmark – std::vector VS std::list VS std::deque	wichtounet	44	12	20		t5_2qi27	False
1347483712.0	zsas3	Day 1 Keynote - Bjarne Stroustrup: C++11 Style - YouTube	nroberts666	40	5	11		t5_2qi27	False
1346825708.0	zdqqf	A compile-time FFT in C++11	pgkreddit	44	10	0		t5_2qi27	False
1343173617.0	x3o9z	PSA: The Most Vexing Parse	jjt	43	6	6	"From Wikipedia [Most vexing parse](http://en.wikipedia.org/wiki/Most_vexing_parse):

&gt; The most vexing parse is a specific form of syntactic ambiguity resolution in the C++ programming language. The term was used by Scott Meyers in Effective STL (2001).[1] It is formally defined in section 6.8 of the C++ language standard.

A simple example:

    #include &lt;iostream&gt;
    
    struct A {
    };

    struct B {
        B(A a) {
            std::cout &lt;&lt; ""B ctor\n"";
        }
    };

    int main() {
        B b(A());
        return 0;
    }

You might think this code should call B::B(A) and ""B ctor"" will print on stdout, however:

    $ g++-4.7 -Wall -std=c++11 mvp.cc 
    $ ./a.out 
    $

*Wat?* Did g++ really just ignore the declaration of the variable 'b' with no warning? Well...no, it interpreted it as a function declaration instead of a variable definition.

To prove this, we can modify the code to print type_info:

    #include &lt;iostream&gt;
    #include &lt;typeinfo&gt;
    
    struct A {
    };
    
    struct B {
        B(A a) {}
    };
    
    int main() {
        B b(A());
        std::cout &lt;&lt; typeid(b).name() &lt;&lt; ""\n"";
        return 0;
    }

This will print the RTTI name, which is mangled, but c++filt can demangle it for us:

    $ ./a.out | c++filt -t
    B (A (*)())

Lets break this down. 'b' is declared as a function that returns type 'B' and takes a single argument that is a function pointer. The argument to 'b' is an unnamed function that returns type 'A'. Another way of writing this out would be:


    #include &lt;iostream&gt;
    #include &lt;typeinfo&gt;
    
    struct A {
    };
    
    struct B {
    };
    
    typedef A (*afunc)();
    
    B b(afunc);
    
    int main() {
        std::cout &lt;&lt; typeid(afunc).name() &lt;&lt; ""\n"";
        std::cout &lt;&lt; typeid(b).name() &lt;&lt; ""\n"";
        return 0;
    }

And we get:

    $ ./a.out | c++filt -t
    A (*)()
    B (A (*)())

The crux of the problem seems to be that C allows you to drop the

    (*)

from

    A(*)()

which is what causes B b(A()) to be interpreted as a function declaration.

How to avoid this? C++11 has a feature called [Uniform initialization](http://en.wikipedia.org/wiki/C%2B%2B11#Uniform_initialization) that introduces this syntax for calling constructors, which is unambiguous:

    B b{A{}};

    $ g++-4.7 -Wall -std=c++11 mvp.cc 
    $ ./a.out 
    B ctor
    $

At this point you might be tempted to change your code to always use {} instead of () when calling constructors. However, {} also has an edge case. For example:

    #include &lt;vector&gt;
    #include &lt;iostream&gt;
    
    int main() {
        std::vector&lt;int&gt; v1(100, 0);
        std::cout &lt;&lt; v1.size() &lt;&lt; ""\n"";
    
        std::vector&lt;int&gt; v2{100, 0};
        std::cout &lt;&lt; v2.size() &lt;&lt; ""\n"";
        return 0;
    }

These are not the same:

    $ g++-4.7 -Wall -std=c++11 test.cc 
    $ ./a.out
    100
    2

'v1' calls the vector constructor that creates a vector of 100 items initialized to 0.

'v2' calls the constructor which takes a std::initializer_list&lt;int&gt; of items to add to the vector.

Take away:

 * Be especially careful when calling constructors. Watch out for initializer_list constructors.
 * Write tests.
 * Try compiling your code with clang++ 3.1 for the diagnostics. Unlike g++-4.7, it will actually warn about vexing parse.
 * Remember this before submitting bugs to gcc so you don't get shamed on bugzilla.
 * Be very careful when adding initializer_list constructors to your existing classes. They will become the preferred constructor and can change the meaning of existing code that might have been calling a different constructor.

**EDIT** more links to read about this issue:

http://stackoverflow.com/questions/1424510/most-vexing-parse-why-doesnt-a-a-work

http://www2.research.att.com/~bs/C++0xFAQ.html#uniform-init

**EDIT 2** Add warning about addition of initializer_list constructors to existing code."	t5_2qi27	True
1341517287.0	w3afp	A C++11 library for http and https servers and clients with sync and async client using boost.asio	jbandela	39	3	7		t5_2qi27	False
1337170753.0	tpuaa	C++11 range-based for loop	berium	41	6	23		t5_2qi27	False
1334520085.0	sb73a	A nice C++ Standard Library reference (including most of C++11)	sztomi	43	5	16		t5_2qi27	False
1330166790.0	q5cei	Boost 1.49	Masfo	38	8	3		t5_2qi27	False
1315414793.0	k7r76	C++ and Beyond 2011: Herb Sutter - Why C++?	Masfo	38	4	4		t5_2qi27	False
1303025110.0	gry5z	The poor state of C++ education		52	15	35		t5_2qi27	False
1302536894.0	gngli	Introducing C++11	gst	36	4	23		t5_2qi27	False
1294151819.0	evzzu	"Interview with Bjarne Stroustrup (""concurrency without say 'thread' or 'lock'"")"		37	2	9		t5_2qi27	False
1265376438.0	ayfpv	LLVM+CLang successfully self-hosts	last_useful_man	37	0	8		t5_2qi27	False
1254150520.0	9otie	Stroustrup: C++ Style and Technique FAQ	KayEss	42	7	0		t5_2qi27	False
1226250517.0	7cawf	C++ for the next decade 	gst	41	4	0		t5_2qi27	False
1376240305.0	1k5gfv	Open Multi-Methods for C++11, Part 1	mttd	37	4	9		t5_2qi27	False
1371546068.0	1gkpdn	Qt5.1 RC available:	meetingcpp	41	5	11		t5_2qi27	False
1370024513.0	1ff2by	GCC 4.8.1 released, C++11 feature complete	eric_niebler	40	9	9		t5_2qi27	False
1360834185.0	18i8nf	Open and Efficient Type Switch for C++&amp;amp;#8212;Solodkyy, Dos Reis, and Stroustrup	aleonar	39	8	10		t5_2qi27	False
1356185428.0	15a3en	Clang 3.2 released	berium	39	6	10		t5_2qi27	False
1349247701.0	10v4o4	The value of passing by value	Andrey_Karpov_N	39	6	3		t5_2qi27	False
1340735364.0	vn3wa	C++11: unique_ptr	cmeerw	41	5	6		t5_2qi27	False
1338382545.0	uc15u	C++11 perfect forwarding and overload resolution	berium	40	4	11		t5_2qi27	False
1327300898.0	oskvn	Calling conventions for different C++ compilers and operating systems	Andrey_Karpov_N	43	7	10		t5_2qi27	False
1324747709.0	np9oj	Built this space game engine from scratch in C++ (n' OpenGL)	onionman77	43	12	4		t5_2qi27	False
1310453596.0	in737	The most useful GCC options and extensions 	gst	42	5	3		t5_2qi27	False
1301751971.0	gh30w	Scott Meyers @ C++Next: Appearing and Disappearing consts in C++	eric_niebler	37	4	5		t5_2qi27	False
1294833975.0	f0ulv	How to write a C++ program without libstdc++	rv77ax	40	9	25		t5_2qi27	False
1286861853.0	dq231	C++0x: Implicit Move Must Go	secret_town	38	4	36		t5_2qi27	False
1276700630.0	cfmzt	Using The C++ STL, Part 1 – Intro and Sequence Containers	gst	38	5	8		t5_2qi27	False
1271186640.0	bqfhx	Lambdas implemented in C++ with templates	int3_	42	5	15		t5_2qi27	False
1372360309.0	1h73ta	What's New for Visual C++ Developers in VS 2013 Preview	STL	42	8	24		t5_2qi27	False
1364813135.0	1bey20	A look at C++14 and beyond - Part 2	meetingcpp	47	12	2		t5_2qi27	False
1358849959.0	171ru6	C++ puzzle: with all methods const can a private field change?	mixedbit	55	26	28		t5_2qi27	False
1356566071.0	15hp0e	Qt 5 C++ UI framework released	digitalsurgeon	47	14	6		t5_2qi27	False
1353372269.0	13hbwt	Bloomberg Basic Standard Library (BSL)	the-fritz	42	10	19		t5_2qi27	False
1340274622.0	vdjry	C++11: using unique_ptr with standard library containers	cmeerw	34	2	13		t5_2qi27	False
1339117845.0	uqsg4	C++, Ruby, CoffeeScript: a visual comparison of language complexity	alexkorban	41	8	17		t5_2qi27	False
1334002465.0	s1bli	C Finally Gets A New Standard	coelhudo	38	7	11		t5_2qi27	False
1307968295.0	hygfz	multithreading - C++0x introduces a standardized memory model. What does it mean? And how is it going to affect C++ programming?	gst	38	5	4		t5_2qi27	False
1271459290.0	bs1qz	What's the IDE with the best C++ code completion (STL/boost) available for Linux? Vim with onmicomplete? Anjuta 2.30 or what else?	nbonelli	38	2	35		t5_2qi27	True
1270723887.0	bo39o	C++0X with Scott Meyers (SE Radio Podcast)	multiplydie	33	2	2		t5_2qi27	False
1374935848.0	1j5tay	2013 ICPC Bjarne Stroustrup	mttd	36	6	1		t5_2qi27	False
1374604580.0	1iwffh	The Return of C++ - Framehawk Inc.	mttd	43	12	28		t5_2qi27	False
1372262636.0	1h458u	Visual Studio 2013 Available for Download. Supposedly this has supports more of C++11	jbandela	37	3	31		t5_2qi27	False
1369423580.0	1ezlu8	The Shortest Crashing C Program	vinipsmaker	52	23	11		t5_2qi27	False
1367974265.0	1dwfn8	The View from Aristeia: C++14 Lambdas and Perfect Forwarding	mttd	39	9	6		t5_2qi27	False
1367615791.0	1dn5u5	C/C++ Low Level Curriculum Part 11: Inheritance // #AltDevBlogADay	mttd	41	6	3		t5_2qi27	False
1366392163.0	1copbr	Obscure C++ Features	constexpr	36	6	29		t5_2qi27	False
1366201103.0	1cj0kw	Using gcc’s 4.8.0 Address Sanitizer with Qt	meetingcpp	40	10	0		t5_2qi27	False
1361725300.0	194zc5	Concepts Lite: Constraining Templates with Predicates (Andrew Sutton, Bjarne Stroustrup)	cmeerw	36	5	19		t5_2qi27	False
1361398602.0	18wvyc	C++ Grandmaster Certification: Programming Assignment 1 (pptoken)	cmeerw	45	12	23		t5_2qi27	False
1357692658.0	167uqr	I wrote a QuickCheck library for C++11. QuickCheck helps write unit tests by building random test cases. It has documentation, including a tutorial.	therealjohnfreeman	36	9	9		t5_2qi27	False
1354729726.0	14byua	How to avoid includes in headers « C++ on a Friday	mttd	48	13	39		t5_2qi27	False
1353767139.0	13ppzr	OpenVDB: an open source C++ library comprising a novel hierarchical data structure developed by DreamWorks	vinipsmaker	39	7	8		t5_2qi27	False
1351456579.0	128h5x	TC++PL4e: Coming soon, and preview cover shot	milliams	33	2	7		t5_2qi27	False
1350565216.0	11oqhy	C++11 async tutorial	tompa_coder	41	10	9		t5_2qi27	False
1349290105.0	10w0lt	Poll: What features would you like to see added soonest in your favorite C++ compiler? « Sutter’s Mill	QuantumSense	37	8	44		t5_2qi27	False
1343552044.0	xc4az	I don't know when this happened, but clang has apparently overtook gcc in number of supported C++11 features	sztomi	37	5	21	"[clang status](http://clang.llvm.org/cxx_status.html)

[gcc status](http://gcc.gnu.org/projects/cxx0x.html)

This, of course assumes that both documents are up-to-date. I thought it might be interesting for those who want to experiment with the new features."	t5_2qi27	True
1342800563.0	wvnko	Build Systems for C/C++ projects	sazzer	39	8	61	"I keep looking at the various build systems that are out there for C/C++ projects, and - unless I'm totally missing something - I keep despairing at the choice.

The ones that I know about are:

* Autotools. We all know the pain that goes here
* CMake. This is better than Autotools, but not by a lot
* SCons. ""We'll write a system that lets you write an entire Python program to power your build system"". The MongoDB SConstruct file is approaching 2,000 lines long last time I looked!
* Waf. Similar to SCons but you distribute the waf program with your source tree as well. The wscript file for node.js was over 1,000 lines long again!
* BJam. I've not looked at this an awful lot yet, and I do intend to do so, but I have memories of Boost being painful to build...
* Write your own Makefiles. This is always an option, but again painful to maintain - especially if you want to work cross-platform, which the above are all meant to make easier. (Hah!)

I know there are a bunch of others that can do the job too - Rake, Gradle, Ant, etc - but they aren't really designed for it like the others are meant to be...

So - What do people here use for their C/C++ Build systems? And how does it work for you?"	t5_2qi27	True
1333350589.0	rp7z8	FastFormat - The fastest, most robust C++ formatting library	hongminhee	40	5	4		t5_2qi27	False
1297504080.0	fk029	shared_ptr - Advanced STL, Part 1 	gst	36	2	2		t5_2qi27	False
1293539655.0	esiwb	Lock-free synchronization algorithms, scalability-oriented architecture, multicore design patterns, high-performance computing, threading technologies and libraries, message-passing systems and related topics mostly in the context of C/C++	dvyukov	34	4	6		t5_2qi27	False
1288299223.0	dxwnd	Everything you ever wanted to know about swapping integers	zzyzzyxx	40	7	20		t5_2qi27	False
1286138202.0	dmbfh	"""'New' Value Terminology."" a C++0x paper by Stroustrup"		33	4	14		t5_2qi27	False
1268150490.0	bb6gq	C++ Convert Int to String Speed	Buckwheat469	39	8	22		t5_2qi27	False
1262439735.0	aks7c	Choosing between Qt and STL containers	razvanpetru	40	6	0		t5_2qi27	False
1219124970.0	6wxlw	Simpler Multithreading in C++0x - The new standard will support multithreading, with a new thread library.	gst	35	4	6		t5_2qi27	False
1217627874.0	6uj45	More C++ Idioms	rexxar	33	3	1		t5_2qi27	False
1374259736.0	1incsz	C99 library support in Visual Studio 2013 - Visual C++ Team Blog	mttd	40	8	5		t5_2qi27	False
1374179617.0	1il1cu	Apache Kills Off Its C++ Standard Library	stesch	40	14	21		t5_2qi27	False
1372935355.0	1hmlok	Living with Lambdas - Functional Programming in C++	meetingcpp	37	11	1		t5_2qi27	False
1372505733.0	1hb1fs	LLDB 3.3 and beyond	cierpuchaw	34	4	0		t5_2qi27	False
1367709447.0	1dpcc6	Guru of the Week and the Exceptional C++ Series // Sutter’s Mill	mttd	35	5	21		t5_2qi27	False
1367076740.0	1d7we3	Introduction to the C++11 feature: delegating constructors	mttd	41	11	3		t5_2qi27	False
1362858305.0	19zg64	Most Used Words in /r/cpp , courtesy of /r/MUWs	yamamushi	47	13	12		t5_2qi27	False
1354700563.0	14be2h	TIL essentially every C++ operator precedence table I have ever referred to places ?: at the wrong precedence level	tennenrishin	36	7	37		t5_2qi27	False
1353452404.0	13j9db	Cross-platform (iOS/Android) Mobile App development using C++	rburhum	43	15	11		t5_2qi27	False
1351955027.0	12kdjc	Herb Sutter: The Future of C++ (Channel 9)	Lee-R	43	14	8		t5_2qi27	False
1339519135.0	uy5kb	Lock-free programming: Atomic RMW, CAS, Sequential Consistency	gtani	36	7	1		t5_2qi27	False
1334713899.0	sf9mg	Clang Diagnostics Comparison	pfultz2	41	8	16		t5_2qi27	False
1331887174.0	qz5o0	What is your opinion about Qt?	sztomi	43	13	106	"I've been working with Qt for about 2 years and I like it. In my experience, many people have strong opinions about it, one way or another. Having an external preprocessor to add magic feels awkward, but it's well integrated and adds real value (dynamic invocation and some reflection). I see it as a practical solution, which is not necessarily beautiful, but allows me to ship on time. 

One thing I'm not particularly fond of is its preferred memory management model. The QObject tree that frees memory is nice and all, but I would feel better if I used smart pointers and RAII (I use the latter whenever possible). 

So /r/cpp, what is your opinion about Qt? Love it? Hate it? If so, what tools do you use instead for the same task?"	t5_2qi27	True
1322585566.0	mthek	PVS-Studio: analyzing Doom 3 code	Andrey_Karpov_N	47	19	6		t5_2qi27	False
1322197145.0	mol07	Example of C++11 compile-time binary number literal (and a brief run-time example too)	muon314159	31	1	18		t5_2qi27	False
1315350588.0	k6xkd	C++11 Concurrency Series [Part 2]	Masfo	33	6	9		t5_2qi27	False
1308507747.0	i3p8m	6 Free E-Books on C and C++	mmmdelishus	35	5	2		t5_2qi27	False
1269037278.0	bfo5h	For beginners like me; this really helped clear up pointers.	ZLegacy	35	7	6		t5_2qi27	False
1261082837.0	afvi3	Why hypertable Developers Chose C++ Over Java	mebrahim	35	4	1		t5_2qi27	False
1232524656.0	7ranf	C and C++ are CRAZY! 	gst	46	15	19		t5_2qi27	False
1375756009.0	1js9ho	C++ concurrency cheatsheet	alexkorban	35	6	4		t5_2qi27	False
1374243456.0	1imrex	Larry and Jen do Roman Numerals in C++	cmeerw	38	9	14		t5_2qi27	False
1372419421.0	1h8qnq	The C++ Network Library 0.10.0 is Released	nico159	34	7	12		t5_2qi27	False
1372176596.0	1h1m1z	C++ not complicated enough? Why not add monads? Eric Nieblers current best shot at the state monad … Can you do better?	meetingcpp	42	11	28		t5_2qi27	False
1372080516.0	1gytrr	OnPosix: a tiny library to abstract POSIX mechanisms to C++ developers.	lingua_franca	37	9	4		t5_2qi27	False
1370535321.0	1fsqgm	Moving Is Not Copying | Dr Dobb's	mttd	35	6	7		t5_2qi27	False
1369686543.0	1f5n2s	Sorry if this has been addressed. Folks here and at StackOF recommend Accelerated C++, but it was published back in 2000. Isn't it out of date?	Nomopomo	34	6	17	"If I'll be missing out with Accelerated C++, I'll go with C++ Primer 5th Edition.  
  
I just don't want to be learning wrong information from 13 years ago.  
  
Thanks!  
  
PS: I have a decent ability in C. I'm fully comfortable with pointers and such. Never tried Object Orientation though. Basically, I'm a 3rd year comp-sci student with little hands-on programming under my belt, having only been asked to implement data structures like heaps, random number generators, little terminal chess move calculators and such. Pretty excited for C++"	t5_2qi27	True
1369331848.0	1ex05d	C++ REST SDK 1.0.0 Released!	purpleturtle1	33	3	12		t5_2qi27	False
1367848379.0	1dsii5	GotW #1: Variable Initialization—or Is It? (3/10)	mttd	45	17	0		t5_2qi27	False
1367539971.0	1dl5ce	LLVM (Clang) conference on April 29-30 2013 slides &amp; videos	hun_nemethpeter	34	5	0		t5_2qi27	False
1360086061.0	17xxxl	Stephan T. Lavavej - Core C++, 8 of n 	Masfo	33	3	11		t5_2qi27	False
1354047729.0	13w331	23 C++11 bugs you no longer need to worry about in VS2012	alexkorban	44	11	22		t5_2qi27	False
1353962511.0	13tx5r	"Doug Gregor on Module Support for the ""C Family"" [PDF slides]"	the-fritz	31	4	8		t5_2qi27	False
1348040203.0	104kpy	Errors detected in the Visual C++ 2012 libraries	Andrey_Karpov_N	46	18	10		t5_2qi27	False
1336208724.0	t85vj	C++ metaprogramming: I wrote a simple reflection framework in C++, suitable for aspect-oriented programming in video game engines (no custom build steps required).	simonask	39	9	18		t5_2qi27	False
1334874411.0	sikva	Get to Know the New C++11 Initialization Forms 	wordsmithie	36	6	6		t5_2qi27	False
1334744389.0	sft21	C++11 generalized attributes	berium	32	5	6		t5_2qi27	False
1324712774.0	noydb	John Carmack on Static Code Analysis	Andrey_Karpov_N	38	11	7		t5_2qi27	False
1318437698.0	l9po0	C++11 regex tutorial	tompa_coder	33	3	5		t5_2qi27	False
1316279074.0	kirs4	"""Writing modern C++ code: how C++ has evolved over the years"" - Herb Sutter [video]"		35	7	39		t5_2qi27	False
1316199308.0	khxgf	Spot the bug	raldi	39	10	35	"    ::foo::bar&lt;baz&gt;* p = new ::foo::bar&lt;baz&gt;;
    scoped_ptr&lt;::foo::bar&lt;baz&gt; &gt; sp(p);"	t5_2qi27	True
1311555209.0	iyqvn	Software optimization resources. C++ and assembly. Windows, Linux, BSD, Mac OS X	bitshifternz	38	9	2		t5_2qi27	False
1309437192.0	id6xi	Why your next language better be C++	gst	47	17	25		t5_2qi27	False
1308066593.0	hzhcd	Why do C++ folks make things so complicated? 	gst	41	12	14		t5_2qi27	False
1306425569.0	hkqgv	C++0x in Qt 	gst	36	8	2		t5_2qi27	False
1293274674.0	er9fd	A Modest Proposal: C++ Resyntaxed	mebrahim	38	9	14		t5_2qi27	False
1255725490.0	9utzk	C++ in Coders at Work	academician	31	3	5		t5_2qi27	False
1375974190.0	1jyizo	Universal References and the Copy Constructor	meetingcpp	31	1	22		t5_2qi27	False
1375782067.0	1jsw7o	Bandit - Human friendly unit testing for C++11	tickticktick	34	5	7		t5_2qi27	False
1373626464.0	1i59h2	boost.mixin	meetingcpp	37	9	9		t5_2qi27	False
1373274356.0	1hurqe	When decltype meets auto	milliams	35	6	8		t5_2qi27	False
1372915595.0	1hm8xc	Catch 1.0 - Single-header test framework for C++, Objective C. Catch provides expression decomposition: lhs, rhs values are reported when assertions fail.	martinmoene	44	14	17		t5_2qi27	False
1371683202.0	1gotur	Embedded in Academia : Integer Undefined Behavior Detection using Clang 3.3	mttd	33	7	0		t5_2qi27	False
1370921715.0	1g3hh5	C++Now 2013 Keynotes now available : Standard C++	mttd	33	5	9		t5_2qi27	False
1369115920.0	1eqze7	C++ exceptions under the hood	Andrey_Karpov_N	32	5	1		t5_2qi27	False
1367027746.0	1d6zg9	C++ on the Web: Run Your Big 3D Game in the Browser! -- Andre Weissflog	mttd	40	11	6		t5_2qi27	False
1358977252.0	175bik	STXXL: Standard Template Library for Extra Large Data Sets.	lingua_franca	39	9	12		t5_2qi27	False
1358568969.0	16uypa	Resource Management the C++ Way // Speaker Deck	mttd	37	7	1		t5_2qi27	False
1354270776.0	141ots	Introduction to Modern C++ Techniques - Michael Caisse	milliams	40	12	0		t5_2qi27	False
1353963705.0	13tym1	C++ benchmark - std::vector VS std::list	wichtounet	38	9	33		t5_2qi27	False
1351269232.0	124p90	"Is ""using namespace std"" bad or something?"	workyworkyworky	37	11	33	"Whenever I read code online it seems anything from the std namespace is used by prefixing `std::`, for example `std::cout`, or `std::vector&lt;&gt;`, etc.

I'm always wondering why somewhere in their code they didn't just write `using namespace std` so they wouldn't have to write `std::` in front of everything.  Is it considered bad form or something?"	t5_2qi27	True
1342885046.0	wxcei	Interesting syntax usage in C++ (and C too, I imagine).	renjipanicker	47	20	44		t5_2qi27	False
1342564013.0	wq5nr	C++11 regex library cheatsheet	alexkorban	34	7	6		t5_2qi27	False
1337693944.0	tz7vs	Visual C++ Compilers and C Runtime removed from Windows 8 SDK	pjmlp	41	11	28		t5_2qi27	False
1331212196.0	qn9n2	Interview with Nicolai Josuttis about C++11 and his new book -- he doesn't use C++ any more nor followed the standardisation process	milliams	32	2	27		t5_2qi27	False
1327007757.0	ontmw	Get a sneak peak at what the next C++ might look like (concepts, module, fixed point, filesystem, range, etc proposals)	zxcvbn33	34	6	12		t5_2qi27	False
1320857876.0	m694o	Mythology in C++: Exceptions are Expensive	Masfo	46	18	17		t5_2qi27	False
1308097143.0	hzvbl	PathScale compilers open sourced - C99, C++, Fortran	tompa_coder	30	1	4		t5_2qi27	False
1301435304.0	ge8l3	x = x++;		39	13	22	"*Boom!*

edit 1: [context](http://www.eetimes.com/design/embedded/4214570/Is-it-time-for-another-look-at-how-we-build-safety-critical-embedded-systems-). 

edit 2: explanation

    x = x++; //Is undefined behavior. operator '=' is no sequence point. Assignment might happen before or after operator '++' side effect. (If side effects happen before the assignment, the increment will obviously be lost because the 'postfix++' operator evaluates to the old value and this old value is what will be assigned back over the new value.) 

    ((x = x), (x++)); //Is well defined. operator ',' is sequence point. Assignment happens before operator '++' side effect.

    x = x, x++; //Is well defined. operator ',' is sequence point. Assignment happens before ++ side effect. Semantics are the same as above as '++' has precedence over '=' and the ',' operator has the lowest precedence.

    x = (""whatever"", x++); //Is well defined. operator ',' is sequence point. Assignment happens after ++ side effect. The ',' operator evaluates to its second sub-expression so the first can be anything."	t5_2qi27	True
1297452318.0	fjmuc	Online technical articles that have transformed how I develop software.	ZMeson	35	6	4	"These online articles have shaped how I develop software:

* [Fail Fast](http://docs.google.com/viewer?a=v&amp;q=cache:DtSaIciViFYJ:www.martinfowler.com/ieeeSoftware/failFast.pdf+fail+fast+jim+shore&amp;hl=en&amp;gl=us&amp;pid=bl&amp;srcid=ADGEESjRdcMKhB9qww1Tp9-1y4wF8mTeYmJfPZ5vJ-iacoEYcHf48j6c9D-4P7jA6uQSw53hEFhWOUPkKNj8Vx2rFJouUnWXJ_gpccQEnX4Gu7O2JQDauBFDCBXj6fcPvMThUcwIUOWt&amp;sig=AHIEtbTaXEjp3WzyoyLwswlRDCDLLpj1AQ) by Jim Shore. *IEEE Software*, Sept/Oct 2004
* [Understanding C/C++ Strict Aliasing](http://docs.google.com/viewer?a=v&amp;q=cache:iBjSTckDu_0J:dbp-consulting.com/StrictAliasing.pdf+http://dbp-consulting.com/StrictAliasing.pdf&amp;hl=en&amp;gl=us&amp;pid=bl&amp;srcid=ADGEESgMAjye894iGFY9lQbe3dECik7HniBhGKCLdFkoAwBR-GDx5aGnTKEM8C_hieSbPn-7gIHHLSaJiknOdNpm4yMNEtKQR5zi3dM-vHwSce5RQ4XXHl2O-lxiBHEBKeHe0JUUqRf7&amp;sig=AHIEtbRUOso9-u2WNgSaUU3X1mfvPj-Waw) by Patrick Horgan
* [Prefer Using Active Objects Instead of Naked Threads](http://www.drdobbs.com/go-parallel/article/showArticle.jhtml;jsessionid=5KMO4HYDOOLC1QE1GHPSKH4ATMY32JVN?articleID=225700095) by Herb Sutter.  *Dr. Dobb's Journal*, June 14, 2010 
* [Mocks Aren't Stubs](http://martinfowler.com/articles/mocksArentStubs.html) by Martin Fowler.  January 2, 2007 
* [Use Lock Hierarchies to Avoid Deadlock](http://www.drdobbs.com/article/printableArticle.jhtml;jsessionid=ZXC402S1SEHGNQE1GHRSKHWATMY32JVN?articleId=204801163&amp;dept_url=/high-performance-computing/) by Herb Sutter.  *Dr. Dobb's Journal*, Dec 11, 2007

What other articles have you found interesting?  Let's share."	t5_2qi27	True
1227786762.0	7g06w	Optimising C++ [pdf]	bnikolictech	35	6	5		t5_2qi27	False
1222371409.0	73jyw	Concepts are in C++0x! 	gst	33	5	2		t5_2qi27	False
1374881141.0	1j4og9	When delegating constructors may stab you in the back — /dev/krzaq	mttd	38	10	14		t5_2qi27	False
1373340953.0	1hwumi	Rule of Zero @ Flaming Dangerzone	vinipsmaker	34	7	9		t5_2qi27	False
1369172886.0	1esisa	[C++11] Am I stupid for not knowing this was possible? Static method declarations can be used to create value typedefs from pointer-like template parameters.	JackTrueborn	33	8	12	"I was looking at a Linq-style library for C++ ([seen here](https://cpplinq.codeplex.com/SourceControl/latest#CppLinq/cpplinq.hpp)) and, while the author's use of whitespace made the code almost unreadable to me, I noticed something very interesting (which, admittedly, I immediately thought wouldn't link.) The edited code is:

    template&lt;typename TValueIterator&gt;
    struct from_range : base_range
    {
        static TValueIterator get_iterator();
        ...
        typedef decltype (*get_iterator()) raw_value_type;
        ...
    };

What is being demonstrated here is that the `get_iterator()` function is never defined, but the `decltype` keyword is used with it to create a value typedef of the template's sole parameter. Since `decltype` resolves at compile time and the `get_iterator()` function is never actually called, there are no linker errors.

Is there a name for this other than ""hack""? I'm still getting used to the nuances of C++11."	t5_2qi27	True
1368572550.0	1echca	Empty list initialization | Andrzej's C++ blog	mttd	34	6	4		t5_2qi27	False
1363622698.0	1aj34v	Introduction to C++11: nullptr and innovations of the initialization system	ikalnitsky	38	11	5		t5_2qi27	False
1363037765.0	1a3tq3	Metaprogramming a full Virtual Machine	meetingcpp	35	8	4		t5_2qi27	False
1358933184.0	1745a3	N3514: A Proposal for the World’s Dumbest Smart Pointer [PDF]	grunzl	31	7	20		t5_2qi27	False
1356250930.0	15biz2	An implementation of generic lambdas (request for feedback) -- Faisal Vali	lanzkron	29	2	3		t5_2qi27	False
1353742242.0	13pg33	Extensible Records in C++	jb55	29	4	5		t5_2qi27	False
1352285892.0	12sifw	Herb Sutter Live: VC++ C++11 Conformance, isocpp.org, Standard C++ Foundation	milliams	37	10	2		t5_2qi27	False
1352040708.0	12m2m0	Assert Statements Shine Light Into Dark Corners | Dr Dobb's	mttd	30	4	3		t5_2qi27	False
1351701528.0	12elv2	Binary code obfuscation through C++ template metaprogramming	Andrey_Karpov_N	35	7	16		t5_2qi27	False
1351530144.0	12a7ry	The Future of C++: Live broadcast this Friday	cmeerw	33	8	10		t5_2qi27	False
1349530714.0	111h7k	A superb guide to operator overloading	nibot	36	7	16		t5_2qi27	False
1345237794.0	yeaxb	[Destructors that throw] Evil, or Just Misunderstood? «  C++Next	mttd	32	4	12		t5_2qi27	False
1341703513.0	w75h8	C++Now! 2012 videos	conceptualism	31	6	2		t5_2qi27	False
1334161695.0	s4j6h	C/C++ Low Level Curriculum Part 1-7	Andrey_Karpov_N	32	5	1		t5_2qi27	False
1331044041.0	qk5vc	Rvalue reference pitfalls	berium	28	1	2		t5_2qi27	False
1328344552.0	pagr7	Going Native 2012 Day 1 Keynote - Bjarne Stroustrup: C++11 Style	zxcvbn33	31	4	0		t5_2qi27	False
1323390884.0	n5kq6	[2010] Evernote 4 for Windows : leaving .NET for C++	rexxar	36	10	21		t5_2qi27	False
1309001666.0	i8us2	Challenge: Programmatically Detect C++0x vs C++03	Poita_	33	7	6		t5_2qi27	False
1285321408.0	di96g	"Expressive C++: Why Template Errors Suck and What You 
Can Do About It"	cmeerw	31	4	3		t5_2qi27	False
1265927711.0	b10up	std::cout magic	joelthelion	37	8	11		t5_2qi27	False
1264734869.0	avhor	FastFlow -- a skeletal multi-core programming framework [C++ template library]	mebrahim	37	10	5		t5_2qi27	False
1259676492.0	a9v42	Qt 4.6.0 Released Early due to Good Behaviour		31	6	3		t5_2qi27	False
1249459384.0	97oj6	Is there a reason to not use Boost?	rexxar	32	5	19		t5_2qi27	False
1242844506.0	8ly7l	 I (Still) Love C++ 	gst	42	16	17		t5_2qi27	False
1235215037.0	7z5m1	one malloc to rule them all 	gst	31	5	5		t5_2qi27	False
1376481807.0	1kcd3j	Anyone taking the C++ Grandmaster Certification?	fableal	37	10	19	"Is anyone taking the C++ Grandmaster Certification (http://www.cppgm.org/)?
When it began, some people pointed that this would be a herculean task, others suspected that this was a hoax. I'm asking for feedback, positive or negative, from people who might be doing this, or started and then dropped it.

I'm not affiliated with this project."	t5_2qi27	True
1375564901.0	1jn9ee	CppCheck 1.61 released	meetingcpp	30	5	6		t5_2qi27	False
1374498254.0	1it5dz	Khronos Releases OpenCL 2.0	mttd	31	3	5		t5_2qi27	False
1374073791.0	1ihmro	Floating-Point Determinism	mttd	29	3	3		t5_2qi27	False
1373505335.0	1i1sff	null: C++11 tuple implementation details (Part 1)	mttd	27	1	0		t5_2qi27	False
1371063574.0	1g7plc	Render/update thread synchronization sample, using std::thread, std::mutex and std::condition_variable (C++11)	4fips	32	4	6		t5_2qi27	False
1368812413.0	1ej2jf	Data initialization in C++	mttd	31	4	0		t5_2qi27	False
1368639675.0	1ee7yt	An Interview with Bjarne Stroustrup | InformIT	mttd	35	6	2		t5_2qi27	False
1365983058.0	1ccspf	C++: Custom memory allocation - General Programming - Articles - GameDev.net	mttd	31	4	4		t5_2qi27	False
1363917871.0	1arwdd	Blaze-lib:  a C++ linear algebra template expressions library.  Similar to eigen, but faster.	spotta	32	6	10		t5_2qi27	False
1363860927.0	1aq3v5	std::futures from std::async aren't special! - Scott Meyers	milliams	34	8	3		t5_2qi27	False
1361990132.0	19cam7	Image Watch: A VS 2012 Plug-In for C++ Image and Video Debugging	cosmotriton	32	6	5		t5_2qi27	False
1361420931.0	18xoby	Google gperftools: Fast, multi-threaded malloc() and nifty performance analysis tools	lingua_franca	32	5	5		t5_2qi27	False
1356108500.0	158f3y	C++ binary compatible interfaces across compilers with support for string, vector, and exceptions. Call DLL compiled with g++ from exe compiled with Visual C++.	jbandela	33	9	1		t5_2qi27	False
1353189309.0	13db61	How common is the usage of C++ among mobile apps developers?	Digitus_Impudicus	32	7	18	"I have never written a mobile app. Actually I have never owned a smart phone or tablet.
But sooner or later I feel I need to jump onto the bandwagon.

My preferred language would be C++.
But of all the mobile platforms it seems only Microsoft is providing first class citizen treatment to C++ in WinRT. 
But Microsoft is kind of minor player in this market right now.

Android has [NDK] (http://developer.android.com/tools/sdk/ndk/index.html). But they (Google ) state clearly that
you are better off using Java in most situations.

Objetive-C? That will be completely new language and ecosystem. Not ruled out.

So what are my options?"	t5_2qi27	True
1352714045.0	1322am	The View from Aristeia: On the Superfluousness of std::move	milliams	34	7	6		t5_2qi27	False
1351126659.0	121fj7	cpplinq: An introduction | Marius Bancila's Blog	mttd	32	6	7		t5_2qi27	False
1350736367.0	11sn3o	What makes C++ so good?	iamdachckol	57	34	137	"Hi,
I have a question that's really been bothering me recently. I can program in c#, vb, java and of course c++.

The thing that I find very annoying is the lack of knowledge of what makes c++ used more than the other languages. From personal experience c++ is the hardest language from all other ones i know. Instead of having 1 file per class like in java or c# you need to have 2 files per class. Instead of just having a . for accessing members of objects you have a . and a -&gt;. I could list these forever. Yet in the end it turns out that almost everything is written in c++, OSes, applications, games, robots and even traffic lights.

I just need motivation to keep programming in c++. Please don't give me long lists of things I won't understand, use only the things a beginner will find useful and understand.

Thank You very much for your time,"	t5_2qi27	True
1350046623.0	11d35n	Parameter Types in Constructors	tompa_coder	32	7	4		t5_2qi27	False
1349893812.0	119j8r	Async Tasks in C++11: Not Quite There Yet	tompa_coder	37	9	10		t5_2qi27	False
1345754621.0	yprk2	C++11 Tutorial: New Constructor Features that Make Object Initialization Faster and Smoother	wordsmithie	36	12	0		t5_2qi27	False
1345565835.0	yl3wf	On Static If, C++11 in 2012, Modern Libraries, and Metaprogramming [video]	tompa_coder	36	11	1		t5_2qi27	False
1342024706.0	we3vh	Comparing objects in C++	vegardno	36	12	12		t5_2qi27	False
1341934475.0	wbxv9	Unit Testing with Boost.Test	bstamour	29	3	8		t5_2qi27	False
1341860665.0	wa8rc	Stephan T. Lavavej: Core C++ Lecture Series, Part 2 - Template Argument Deduction	cosmotriton	32	5	5		t5_2qi27	False
1340472066.0	vhm1r	What is your wish-list for an ideal GUI toolkit for C++?	sztomi	32	6	72	"Some weeks ago I started a thread here asking opinions about Qt. The general consensus was that it is ""the best of a bad bunch"". What would an ideal GUI toolkit would look like? Features it must have, and features it *must not*? (I will add my thoughts as a comment, too)."	t5_2qi27	True
1336751170.0	tiapp	Mixed language programming - C++11 and Fortran	tompa_coder	32	5	1		t5_2qi27	False
1326095430.0	o92d5	Why I switched from Ruby back to C++ [for game development]	berium	39	11	4		t5_2qi27	False
1321911629.0	mkme4	Moving is better than copying.	zzing	31	3	15		t5_2qi27	False
1299044786.0	fvlo7	NVIDIA CUDA 4.0 simplifies GPU programming, aims for mainstream 	gst	30	4	17		t5_2qi27	False
1297930617.0	fn2t0	The many faces of operator new in C++	gst	32	5	2		t5_2qi27	False
1294787142.0	f0iq8	An interview with Bjarne Stroustrup on C++0x	MulticastX4	27	3	0		t5_2qi27	False
1287697968.0	dulep	"Stroustrup's ""To move or not to move"" C++0x paper. Counter arguments to ""Implicit Move Must Go"". (PDF)"		28	2	22		t5_2qi27	False
1281909360.0	d1hve	"C++0x and beyond. A ""newish"" interview with Stroustrup."		28	2	15		t5_2qi27	False
1265170217.0	axe6o	Order I Say! [C++-Next]	the-fritz	30	4	0		t5_2qi27	False
1248358564.0	93upe	Herb Sutter on concepts: not such a big deal		26	0	8		t5_2qi27	False
1243845048.0	8otaj	VC++ 10 will use the EDG front-end for the IDE !		35	11	1		t5_2qi27	False
1232523665.0	7rakn	&lt;boost/algorithm/string.hpp&gt;	gst	28	1	7		t5_2qi27	False
1229065184.0	7izyd	Dispose of Proprietary Threading APIs and Adopt the New C++ Threading Facilities	gst	30	4	8		t5_2qi27	False
1225809744.0	7b93p	Boost 1.37 released (direct link)		32	7	5		t5_2qi27	False
1222790601.0	74ez8	Why You Should Learn C++	gst	37	11	12		t5_2qi27	False
1373227587.0	1hth74	LXDE project guide for porting from GTK+ to Qt	meetingcpp	31	6	4		t5_2qi27	False
1371828127.0	1gsqv3	Fixing it once and for all: Enforcing units of measure in C++11.	grahamboree	35	10	9		t5_2qi27	False
1371068757.0	1g7x20	Optimizing C++ Code : Overview - Visual C++ Team Blog	mttd	32	6	0		t5_2qi27	False
1370943046.0	1g40mu	JSONxx is a lightweight JSON parser, writer and reader written in C++	r-lyeh	32	8	29		t5_2qi27	False
1365763866.0	1c769c	A look at C++14 and beyond: Papers Part 4	meetingcpp	34	8	4		t5_2qi27	False
1364757992.0	1bdfq9	CppCheck 1.59 released	meetingcpp	34	11	4		t5_2qi27	False
1362866665.0	19zovc	Unit Testing With C++ -- Visual Studio Magazine	mttd	32	8	1		t5_2qi27	False
1360760924.0	18fy2k	ODB C++ ORM 2.2.0 released, adds multi-database support, prepared queries, Qt5, and more	berium	30	7	0		t5_2qi27	False
1349611381.0	1131y9	Developer's Perspective: On List Comprehension in C++	mttd	33	6	5		t5_2qi27	False
1330082592.0	q3y11	"VC++11 Beta ships on Feb 29 with ""complete C++11 standard library"""	sztomi	38	10	64		t5_2qi27	False
1326453133.0	ofbsc	C / C++ Low Level Curriculum Part 3: The Stack	Andrey_Karpov_N	35	10	9		t5_2qi27	False
1324021822.0	neybg	C++11 introduction to multithreading	tompa_coder	34	9	1		t5_2qi27	False
1313692043.0	jn01b	Thread-Safe Copy Constructors (C++0x)		29	4	2		t5_2qi27	False
1311786990.0	j1b9z	LevelDB: A Fast Persistent Key-Value Store 	gst	28	4	10		t5_2qi27	False
1307901452.0	hxvo0	How to teach C++ badly	tompa_coder	39	13	18		t5_2qi27	False
1306324203.0	hjpoo	PVS-Studio vs Chromium	Andrey_Karpov_N	34	11	1		t5_2qi27	False
1302872246.0	gqpfv	Trends and future of C++: Evolving a systems language for performance - by Bjarne Stroustrup	gst	30	5	13		t5_2qi27	False
1301121762.0	gbtfe	We Have FDIS! (Trip Report: March 2011 C++ Standards Meeting)	secret_town	26	-1	11		t5_2qi27	False
1299663692.0	g0c4o	For C programmers that hate C++	gst	36	12	16		t5_2qi27	False
1294036323.0	evae3	Understanding C/C++ Strict Aliasing	mikhailberis	26	1	3		t5_2qi27	False
1285846265.0	dkygc	Extending STL for Games 	gst	33	7	2		t5_2qi27	False
1283288596.0	d7vz8	Trip Report: August 2010 ISO C++ Standards Meeting	rexxar	27	1	0		t5_2qi27	False
1282297830.0	d3drg	C++ Compilation Speed 	gst	32	9	9		t5_2qi27	False
1282120643.0	d2i1k	A Guide to Undefined Behavior in C and C++, Part 1	gst	31	5	2		t5_2qi27	False
1278502520.0	cmu42	C++ Concepts: a Postmortem		26	1	8		t5_2qi27	False
1254754350.0	9qztm	CodeProject: Member Function Pointers and the Fastest Possible C++ Delegates.	rexxar	28	2	6		t5_2qi27	False
1249606229.0	98adx	Bjarne Stroustrup Expounds on Concepts and the Future of C++	gst	27	4	4		t5_2qi27	False
1236226787.0	827vg	Qt 4.5 and Qt Creator 1.0 released	mebrahim	25	0	1		t5_2qi27	False
1233836908.0	7v2hl	C++0x Rvalue references in VC 10		28	3	1		t5_2qi27	False
1218835008.0	6wiqe	Boost 1.36 Released	austinwiltshire	26	1	4		t5_2qi27	False
1375350562.0	1jhgqk	Divide in C++ resource management	meetingcpp	43	18	8		t5_2qi27	False
1375049109.0	1j8krc	GoingNative 2013 Days 1 &amp; 2 Schedule Posted	cosmotriton	29	4	12		t5_2qi27	False
1374470693.0	1ismul	Towards optimization-safe systems	Andrey_Karpov_N	28	4	8		t5_2qi27	False
1372767239.0	1hhq5o	The Happens-Before Relation	mttd	29	5	2		t5_2qi27	False
1371928297.0	1gvai9	Optimizing away small classes (Units of measure followup)	grahamboree	26	4	12		t5_2qi27	False
1370791508.0	1fzfts	C++ Runtime Polymorphism without Virtual Functions	mttd	41	18	24		t5_2qi27	False
1370487401.0	1frlvi	Version 1.54.0 beta, New Libraries: Log, TTI, Type Erasure	Masfo	29	5	5		t5_2qi27	False
1369871314.0	1fawqj	C++ auto and decltype Explained	mttd	30	6	3		t5_2qi27	False
1369858220.0	1fafx0	C++ Reading List | Dr Dobb's	mttd	34	11	12		t5_2qi27	False
1367186851.0	1daote	C++1y/C++14 Support in GCC [x-post from /r/gcc]	the-fritz	32	7	1		t5_2qi27	False
1365799360.0	1c8ais	Optimizing a Program Means Making It Run Faster, Right?	unknownmat	34	13	9		t5_2qi27	False
1365186315.0	1bqypj	Complex initialization for a const variable	mttd	37	15	11		t5_2qi27	False
1363722079.0	1am263	Pythonic ranges in C++11	ared38	37	14	16		t5_2qi27	False
1362264109.0	19jmw3	Fixing an interface bug | Marshall's C++ Musings	mttd	30	6	8		t5_2qi27	False
1361129767.0	18pdhm	Performance of a C++11 Signal System » Tim Janik	mttd	29	5	10		t5_2qi27	False
1359688451.0	17o8jq	"An in-memory b-tree based replacement for std::set and map
 
 
 C++ B-tree - Google Project Hosting"	jbandela	27	4	5		t5_2qi27	False
1358532895.0	16tud5	Version 1.53.0 beta 1 - New libs (atomics, coroutine, lockfree, multiprecision, odeint)	Masfo	35	12	3		t5_2qi27	False
1356020279.0	1567zc	Three optimization tips for C++( Xfer from /r/programming )	lingua_franca	31	8	13		t5_2qi27	False
1355480257.0	14u5fu	Constexpr unions | Andrzej's C++ blog	milliams	27	3	5		t5_2qi27	False
1352941560.0	137oso	(Not) using std::thread | Andrzej's C++ blog	mttd	34	10	13		t5_2qi27	False
1352600540.0	12zpmq	Highlights from the current ISO proposals	mttd	26	2	6		t5_2qi27	False
1352390606.0	12v0hm	Generalised attributes « The New C++	mttd	29	5	9		t5_2qi27	False
1350469567.0	11mgrz	POCO 1.5.0 available	ivan-cukic	32	6	9		t5_2qi27	False
1348587252.0	10gcch	Range-based for loop on an int range? Enumerate!	SplinterOfChaos	28	6	27		t5_2qi27	False
1347477147.0	zs3lu	Visual Studio Express 2012 for Windows Desktop made available	pjmlp	34	12	8		t5_2qi27	False
1345982296.0	yulsu	Functional-Style Programming in C++	cmeerw	33	9	26		t5_2qi27	False
1344954009.0	y7bnr	Using C++11 auto and decltype	berium	29	4	0		t5_2qi27	False
1339369904.0	uv8mz	Why I chose C++ for my product.	renjipanicker	40	12	40		t5_2qi27	False
1337814362.0	u1ssv	User Survey for the /r/cpp community, May 2012	stormblaast	29	6	23		t5_2qi27	False
1337178508.0	tpzax	Stephan T. Lavavej: Core C++ (Lecture Series)	cosmotriton	32	9	8		t5_2qi27	False
1336849023.0	tjybz	The Future of C++ Concurrency and Parallelism (2012-05-11)	protein_bricks_4_all	26	3	0		t5_2qi27	False
1335362571.0	srr11	shared_ptr aliasing constructor	berium	29	6	23		t5_2qi27	False
1333543638.0	rssfa	When to provide an empty destructor	berium	28	3	5		t5_2qi27	False
1330511078.0	qb5rc	Who calls this function?	berium	35	12	13		t5_2qi27	False
1328790804.0	php8p	The Microsoft C++ Compiler Turns 20!	Andrey_Karpov_N	41	20	8		t5_2qi27	False
1328635670.0	pevvw	Dependent name lookup for C++ templates	cmeerw	25	2	0		t5_2qi27	False
1327084936.0	op59u	About size_t and ptrdiff_t	Andrey_Karpov_N	28	5	7		t5_2qi27	False
1326837551.0	olfgy	TIL there are typedefs for yocto, zepto, atto, femto, pico, nano, micro, milli, centi, deci, deca, hecto, kilo, mega, giga, tera, peta, exa, zetta, and yotta	BitRex	28	4	4		t5_2qi27	False
1317123232.0	ksufa	C++11 Concurrency Series [Part 4]	Masfo	31	6	6		t5_2qi27	False
1314657913.0	jyfh6	C++11 Concurrency Series [Part 1]		26	4	5		t5_2qi27	False
1313494583.0	jkdc2	Parallelism as a First Class Citizen in C and C++	tjansson	26	2	3		t5_2qi27	False
1310634055.0	ipabm	Suicide by C++ And How to Avoid It	gst	28	5	17		t5_2qi27	False
1297054147.0	fgnox	A Quick Experiment with Websites in C++ 	gst	27	3	4		t5_2qi27	False
1289971884.0	e7dfw	LLVM/libc++ now dual-licensed under UIUC and MIT licenses, drops binary redistribution clause.	eric_niebler	26	3	1		t5_2qi27	False
1286955379.0	dqko7	Why are requirements for default constructors so common in C++ even though the only way to provide one is often to create invalid objects (objects with nonsensical values) and thus severely degrade the usefulness of the type system?	Taladar	34	9	43	"A lot of containers and similar 'simple' template classes seem to have no regard for this problem at all.

A static type system is only really useful if it can provide a guarantee that a parameter or return value or member declared to be of a given type actually contains a meaningful value of that type at runtime. For many kinds of values there is no good default value (e.g. take an exception type with an error code, a file and a line of the point it is created, what are meaningful defaults for these members to use in a default constructor, or take a type describing a customer, what is a meaningful default name).

C++ culture on the other hand seems to have this weird idea that it is okay to demand a default constructor for all kinds of operations, even simple things like storage in a container. Why is this the case?"	t5_2qi27	True
1284226382.0	dcjp7	Memory management in C++		30	5	20		t5_2qi27	False
1283628636.0	d9mjz	Fastest. Messaging. Ever.	rexxar	33	9	3		t5_2qi27	False
1272952019.0	bzqoi	Parsing C++ with GCC plugins, Part 1	gst	25	0	4		t5_2qi27	False
1263262925.0	aog99	C++ and Beyond: Conference with Sutter, Alexandrescu and Meyer	last_useful_man	35	11	1		t5_2qi27	False
1256166840.0	9wfv9	What Does Haskell Have to Do with C++?	dons	31	7	11		t5_2qi27	False
1249099651.0	96j06	Ask.C++: Looking for references on coding for optimization on x86 architectures	PussyGalore	25	3	11	"I have a project where I want to squeeze every bit of performance possible out of typical Intel multicore CPUs. Beyond simply using the Intel C++ compiler and Intel performance primitive libraries (which I *will* use), I'd like to read up on C/C++ programming techniques, idioms, tips and tricks for optimal code generation on 64 bit multicore x86 CPUs, especially in the areas of cache friendly code and how to make the best use of multiple cores.

I saw a number of books on Amazon:

* [Memory as a Programming Concept in C and C++](http://www.amazon.com/Memory-Programming-Concept-C/dp/0521520436)

* [Code Optimization: Effective Memory Usage](http://www.amazon.com/Code-Optimization-Effective-Memory-Usage/dp/1931769249)

* [Programming with Intel Extended Memory 64 Technology](http://www.amazon.com/Programming-Intel-Extended-Memory-Technology/dp/0976483203)

* [The Art of Concurrency: A Thread Monkey's Guide to Writing Parallel Applications](http://www.amazon.com/Art-Concurrency-Monkeys-Parallel-Applications/dp/0596521537)

* [C++ Concurrency in Action: Practical Multithreading](http://www.amazon.com/gp/product/1933988770)

* [Professional Multicore Programming: Design and Implementation for C++ Developers](http://www.amazon.com/gp/product/0470289627)

* [Optimizing Applications for Multi-Core Processors, Using the Intel® Integrated Performance Primitives](http://www.amazon.com/Optimizing-Applications-Multi-Core-Processors-Performance/dp/1934053015)

* [The Software Optimization Cookbook Second Edition. High Performance Recipes for IA 32 Platforms](http://www.amazon.com/Software-Optimization-Cookbook-Performance-Platforms/dp/0976483211)

* [Hacker's Delight](http://www.amazon.com/Hackers-Delight-Henry-S-Warren/dp/0201914654)

* [The Memory System: You Can't Avoid It, You Can't Ignore It, You Can't Fake It](http://www.amazon.com/Memory-System-Synthesis-Lectures-Architecture/dp/159829587X)

I also spotted this lecture in the [programming subreddit](http://www.reddit.com/r/programming/comments/90o1g/cache_oblivious_algorithms/): 

* [MIT’s Introduction to Algorithms, Lectures 22 and 23: Cache Oblivious Algorithms](http://www.catonmat.net/blog/mit-introduction-to-algorithms-part-fourteen/)

.

Any recommendations would be great -- books, online articles and lectures, papers, frameworks, comments on the books listed above, etc.
"	t5_2qi27	True
1248292479.0	93ma8	"The C++0x ""Remove Concepts"" Decision (Bjarne, 2009-07-22)"	last_useful_man	26	2	1		t5_2qi27	False
1248221676.0	93bz1	Brute Force Programming	mojuba	31	5	3		t5_2qi27	False
1240490601.0	8etd8	GCC 4.4 Release Series 	gst	28	2	3		t5_2qi27	False
1234869618.0	7y0nk	 Is it possible to achieve in C++ the performance one can get from Fortran?	gst	34	10	13		t5_2qi27	False
1231404422.0	7o80r	KDevelop - C++ IDE Evolution: From Syntax Highlighting to Semantic Highlighting 	gst	28	6	13		t5_2qi27	False
1376081697.0	1k1tcd	Optimizing C++ Code : Dead Code Elimination - Visual C++ Team Blog	mttd	30	7	0		t5_2qi27	False
1372535771.0	1hbqx2	Setting up a C++11 development environment on Linux with Clang and Emacs	meetingcpp	35	14	6		t5_2qi27	False
1368734801.0	1egzl0	GotW #3 Solution: Using the Standard Library (or, Temporaries Revisited) | Sutter’s Mill	mttd	32	8	0		t5_2qi27	False
1366550846.0	1csqxa	Trip Report: ISO C++ Spring 2013 Meeting	lanzkron	35	10	1		t5_2qi27	False
1366317702.0	1cmpfv	Sometimes Optimizations Cancel Each Other	mttd	31	6	4		t5_2qi27	False
1366290046.0	1clpnx	The Bristol Papers &amp; the state of C++	meetingcpp	28	7	16		t5_2qi27	False
1363103479.0	1a5h83	"Runtime-Compiled C++—“Edit and Continue”++ for MS VC++, gcc, Clang/LLVM :
        
            Standard C++"	sql_big_result	32	8	26		t5_2qi27	False
1361918407.0	19acxp	"Asynchronous C++ REST SDK (""Casablanca"")"	jbandela	32	9	14		t5_2qi27	False
1359984749.0	17v5t9	Sorting data in parallel CPU vs GPU	mttd	28	5	12		t5_2qi27	False
1357393117.0	16097h	CppDB: an SQL connectivity library that is designed to provide platform and Database independent connectivity API similarly to what JDBC, ODBC and other connectivity libraries do	lingua_franca	31	8	3		t5_2qi27	False
1356956541.0	15pyva	C++11 (sort of kind of) has path dependent types (ish)	logan_capaldo	32	9	10		t5_2qi27	False
1354651268.0	14a0he	Recommendations for good C++ video lectures ?	average_drifter	24	1	10	"Hello, I'm looking for recommendations for some good C++ video lectures.
Not fancy new C++0x stuff or whatever the new standard is called.
I'm interested in classic C++(whatever that means.. I'm not gonna start enumerating standards and stuff),
especially geared towards Linux(not interested in portability).

Anyway, if you have some recommendations like that please write them here, I'd be interested in watching some video lectures on it.

Thanks"	t5_2qi27	True
1353857389.0	13rfd5	Qt Developer Days 2012 Slides	vinipsmaker	26	5	4		t5_2qi27	False
1352524097.0	12y9yg	I was playing around with function object inheritence when I discovered this monster.	SplinterOfChaos	32	10	8		t5_2qi27	False
1352472110.0	12wx22	C++ Soup!: Different Forms of Polymorphism	mttd	34	10	8		t5_2qi27	False
1352077362.0	12n34v	Comparing Memory is Still Tricky | Random ASCII	mttd	27	4	17		t5_2qi27	False
1351620848.0	12clgd	Why isn't std::string::max_size a compile-time constant?	kbok	32	7	12		t5_2qi27	False
1351218810.0	123qff	C++11 sort benchmark	tompa_coder	30	8	3		t5_2qi27	False
1349175320.0	10t731	An Interview with Brian Kernighan on C and The C Programming Language	Andrey_Karpov_N	28	5	3		t5_2qi27	False
1343852903.0	xiwcs	Creating command line applications with boost	radman0x	26	3	15		t5_2qi27	False
1340536191.0	virwc	Poly. Solving the Expression Problem in C++11	pyrtsa	30	7	16		t5_2qi27	False
1340288450.0	vdrpe	"The ""Empty Base"" Optimization"	notlostyet	30	6	13		t5_2qi27	False
1339183068.0	us0kh	Performance Issues for C++ Lambda Expressions	treerex	26	4	4		t5_2qi27	False
1338601835.0	ugkqc	Lots of job openings on Microsoft's C++ team. Go C++!	cosmotriton	39	14	18		t5_2qi27	False
1338552262.0	ufi0n	C++Now! 2012 Presentations and Papers	pjmlp	25	3	6		t5_2qi27	False
1333065099.0	rk30c	c++filtjs: demangle c++ symbols online	nattofriends	29	5	7		t5_2qi27	False
1332774615.0	re9qu	On the evolution of programming style: How far C++ has moved from its C roots	ehamberg	33	11	51		t5_2qi27	False
1328214250.0	p85xh	GoingNative 2012 streaming live now. C++11 talks by some of the most highly regarded programmers in the community	killerfox	27	5	7		t5_2qi27	False
1317670863.0	kzo98	How to: Write a Move Constructor (msdn)	CullsPups	30	7	14		t5_2qi27	False
1317657082.0	kzfzj	C++11 Concurrency Series [Part 5]	Masfo	26	4	0		t5_2qi27	False
1308183941.0	i0s9v	Microsoft Going All-in on GPU Computing	gst	30	9	14		t5_2qi27	False
1307765891.0	hwxmm	The New C++: Lay down your guns, knives, and clubs 	gst	37	11	9		t5_2qi27	False
1307142420.0	hr4qw	C++0x Lambdas compared to Objective-C Blocks	berium	28	4	6		t5_2qi27	False
1303534730.0	gvjzl	C++ template syntax patterns	gst	28	5	9		t5_2qi27	False
1299340826.0	fxxmw	GCC: the impressive and the disappointing	gst	29	6	6		t5_2qi27	False
1298474191.0	fr2kd	Inferring too much - an unexpected(?) repercussion of type inference in C++0x 	JanneVee	29	6	27		t5_2qi27	False
1291446447.0	eg1aj	Yet Another... Web Framework (in C++)	gst	33	10	7		t5_2qi27	False
1274733879.0	c7o1x	Smart pointers in Boost, TR1, and C++x0	cmeerw	31	8	1		t5_2qi27	False
1272842856.0	bz6od	Nice graphs comparing GCC versions (4.5.0 and older), and LLVM	last_useful_man	29	6	8	"http://vmakarov.fedorapeople.org/spec/ (&lt;-- added later, to make best of uninteded self post)

The bottom 2 major headings. Discussion here: http://gcc.gnu.org/ml/gcc/2010-04/msg00948.html"	t5_2qi27	True
1262839939.0	amjrq	"""Even more new C++ features"""	queensnake	34	13	2		t5_2qi27	False
1245751564.0	8uuj3	A series of short articles on Boost (with some focus on finance)	bnikolictech	23	0	0		t5_2qi27	False
1238280899.0	889p6	Bjarne Stroustrup: Geek of the Week	rexxar	26	2	3		t5_2qi27	False
1234346741.0	7wipu	Multithreading in C++0x part 1: Starting Threads 	gst	26	3	3		t5_2qi27	False
1233156151.0	7t2mo	Reading the new C++ Standard	gst	28	5	1		t5_2qi27	False
1225929204.0	7bmsw	Get to know GCC 4	great-pumpkin	27	5	1		t5_2qi27	False
1223566875.0	7662n	Optimizing Your C/C++ Applications, Part 1 	great-pumpkin	28	6	5		t5_2qi27	False
1222288116.0	73bsy	Five Tips for Floating Point Programming.	gst	29	6	0		t5_2qi27	False
1213198126.0	6mxzz	STLFilt:  An STL Error Message Decryptor for C++	jeanlucpikachu	27	4	5		t5_2qi27	False
1376334671.0	1k83u1	Less Than Obvious | Late Developer	mttd	29	7	11		t5_2qi27	False
1373843730.0	1iaxay	Boost.MultiIndex 1.55 preview: major update with C++11 capabilities	joaquintides	26	3	8		t5_2qi27	False
1371125918.0	1g9hmu	When Is It Safe to Move an Object Instead of Copying It? | Dr Dobb's	mttd	26	4	15		t5_2qi27	False
1371083601.0	1g8h3k	Embedded in Academia : Type Punning, Strict Aliasing, and Optimization	mttd	25	4	0		t5_2qi27	False
1368200940.0	1e2og4	Some Subtleties of Aliasing | Dr Dobb's	mttd	32	10	6		t5_2qi27	False
1366659623.0	1cvsof	Header-less C++: a good idea?	ZerothAxiom	33	9	34	"Ignoring for now, if you will, that this may be solving a problem that perhaps doesn't exist. But if we somewhat believe that C++ could be more elegant and efficient (at compilation), if there were no header files.

An approach is two-pass compilation: in the first pass, the compiler would scan the source files and create a map of exported functions and classes. In the second pass, it would actually compile the source (and ensuring that the ""external"" functions/classes are indeed defined somewhere).

IDEs can maintain a map of exported functions etc from all source files in the project. When linking binary libraries, the compiler can embed this information in the binary files itself.

I see two benefits: coding is simpler (no need to switch between header and source files, changing header files does not lead to unnecessary recompilation, definition of template classes in source files); and efficient compilation (for the same reasons).

This is just an idle musing on my part, but does the community think it to be worthwhile idea? Are there other features of C++ that absolutely need header files?"	t5_2qi27	True
1363996398.0	1atwn5	Qt Creator 2.7.0 released, includes improved C++11 code model	bitshifternz	28	6	0		t5_2qi27	False
1359689684.0	17o9xz	How much effort does it take to make a c++ compiler (or why the C++ grandmaster is bogus)	jbandela	42	21	12		t5_2qi27	False
1357636492.0	166c78	C++ and Beyond 2012: Herb Sutter - Concurrency and Parallelism	cmeerw	28	6	8		t5_2qi27	False
1357393063.0	16096j	CppCMS: a Free High Performance Web Development Framework (not a CMS) aimed for Rapid Web Application Development. 	lingua_franca	24	3	15		t5_2qi27	False
1355315110.0	14q0if	KDAB - Videos now available from Qt Developer Days	milliams	25	3	0		t5_2qi27	False
1354527265.0	146zl0	Tour of C++: Second chapter posted	milliams	28	8	0		t5_2qi27	False
1354527240.0	146zkh	Exception-Safe Coding in C++ -- Jon Kalb	milliams	32	9	2		t5_2qi27	False
1351015062.0	11yh29	User-defined literals — Part II | Andrzej's C++ blog	mttd	27	6	3		t5_2qi27	False
1349975576.0	11bg7h	A C++11 pseudo-keyword-argument solution	justinvh	28	8	19	"Hey /r/cpp!

I thought you guys might find this interesting. I came up with a small solution for keyword arguments using operator suffixes and variadic templates. It's not the best solution by any means, but it is a fun and pure C++11 implementation that can be improved upon!

The solution allows you to write keyword arguments like:

    int main()
    {
        greet(""user""kw=""Justin"");
        greet();
    }

And use them like:

    void greet(const kwargs&amp; kw = kwargs())
    {
        int age = kw[""age""]; // default initialized values for copy semantics.
        int happiness = kw.get(""happiness"", 0);
        std::string name = kw.get(""user"", std::string(""somebody""));
        std::cout &lt;&lt; ""Hello, "" &lt;&lt; name &lt;&lt; ""!"" &lt;&lt; std::endl;
    }

Here is the actual code:

    #include &lt;string&gt;
    #include &lt;map&gt;
    #include &lt;memory&gt;
    #include &lt;iostream&gt;

    class kwarg {
    public:
        kwarg() = default;
        kwarg(const char* name)
            : name(name) { }

        struct kwarg_proxy_base { virtual ~kwarg_proxy_base() {}; };

        template &lt;typename T&gt;
        struct kwarg_proxy : kwarg_proxy_base {
            kwarg_proxy() = default;
            kwarg_proxy(const T&amp; t)
                : t(t) { }
            typedef T type;
            const T&amp; t;
        };

        kwarg&amp; operator=(kwarg&amp; rhs)
        {
            value = rhs.value;
            return *this;
        }

        template &lt;class T&gt;
        kwarg&amp; operator=(const T&amp; rhs)
        {
            value = std::shared_ptr&lt;kwarg_proxy_base&gt;(new kwarg_proxy&lt;T&gt;(rhs));
            return *this;
        }

        kwarg&amp; operator=(const char* rhs)
        {
            char_value = std::string(rhs);
            value = std::shared_ptr&lt;kwarg_proxy_base&gt;(
                    new kwarg_proxy&lt;std::string&gt;(char_value));
            return *this;
        }

        template&lt;typename T&gt;
        operator const T&amp;() const {
            if (!value) return T();
            return dynamic_cast&lt;const kwarg_proxy&lt;T&gt; &amp;&gt;(*value).t;
        }

        template &lt;typename T&gt;
        operator T*() const {
            if (!value) return nullptr;
            return &amp;dynamic_cast&lt;const kwarg_proxy&lt;T&gt; &amp;&gt;(*value).t;
        }

        template &lt;typename T&gt;
        operator T() const {
            if (!value) return T();
            return dynamic_cast&lt;const kwarg_proxy&lt;T&gt; &amp;&gt;(*value).t;
        }

        const std::string name;
        std::string char_value;
        std::shared_ptr&lt;kwarg_proxy_base&gt; value;
    };

    // let's ignore the non _ prefixed reserved literals for now.
    kwarg operator """" kw (const char* literal, size_t n)
    {
        return kwarg(literal);
    }

    class kwargs : public std::map&lt;std::string, kwarg&gt; {
    public:
        template &lt;typename T&gt;
        const T&amp; get(const std::string&amp; key, const T&amp; default_parameter = T()) const
        {
            auto it = this-&gt;find(key);
            if (it == this-&gt;end()) 
                return default_parameter;
            if (it-&gt;second.value) 
                return it-&gt;second;
            return default_parameter;
        }

        template &lt;typename T&gt;
        T get(const std::string&amp; key, T default_parameter = T())
        {
            auto it = this-&gt;find(key);
            if (it == this-&gt;end()) 
                return default_parameter;
            return it-&gt;second;
        }
    };

    void greet(const kwargs&amp; kw = kwargs())
    {
        std::string name = kw.get(""user"", std::string(""somebody""));
        std::cout &lt;&lt; ""Hello, "" &lt;&lt; name &lt;&lt; ""!"" &lt;&lt; std::endl;
    }

    template &lt;typename... Args&gt;
    void greet(kwargs kw, kwarg k, Args... args)
    {
        kw[k.name] = k;
        greet(kw, args...);
    }

    template &lt;typename... Args&gt;
    void greet(kwarg k, Args... args)
    {
        kwargs kw;
        kw[k.name] = k;
        greet(kw, args...);
    }

    int main()
    {
        greet(""user""kw=""Justin"");
        greet();
    }

Shameless plug: If you're interested in the details, you're more then welcome to [read my write up on it](http://justinvh.blogspot.com/2012/10/c11-named-parameters-using-operator.html)."	t5_2qi27	True
1348778564.0	10kyqn	"Pattern matching in C++ (crosspost from /r/haskell)
[PDF]"	kibedodo	26	2	3		t5_2qi27	False
1348606986.0	10gy8b	Unifying Generic Functions and Function Objects	cmeerw	25	1	2		t5_2qi27	False
1344958251.0	y7fnh	Cling a C++11 interpreter	CppNewbie	32	11	8		t5_2qi27	False
1344373665.0	xudw9	Boost Version 1.51.0 beta	Masfo	30	8	11		t5_2qi27	False
1342775674.0	wv6r6	What are your best tools when compiling with g++?	luckyvae	25	4	61	"Hi everyone,

I was wondering, what are the different tools that you are using when compiling with gcc/g++ to make your life easier?
I use colorgcc (http://schlueters.de/colorgcc.html) and ccache (http://ccache.samba.org/). What tools (extensions?) are you using to improve your life?"	t5_2qi27	True
1340970287.0	vshtl	What are the state of the art methods/tools for preventing vulnerabilities in your c/c++ code?	cdidd	28	6	68	For example a way to prove absence of buffer overflows(or other types of safety violations) in your code. I imagine a tool that analyses your source, and automatically certifies absence, if it couldn't further decide whether some code fragment has vulnerability or not - it asks user to annotate it with the proof . So it doesn't insert runtime check in such places. Are there any working practical solutions ready?	t5_2qi27	True
1339273353.0	utln4	On Teaching C++	bstamour	35	13	17		t5_2qi27	False
1338181721.0	u8as0	std::string or char*, what's quicker?	danielnh	28	7	99	"Hi Guys, assuming you're using either one in your projects for optimisation purposes (in the context of *by reference* functional params) ; What's quicker? and why? Am I being pedantic for even worrying about this. 


| I should follow up - I'm being accused of writing code like a Java programmer (with copy constructors all over the place)! so looking into it I'm attemping to copy by reference instead and wondering what to do about my std::strings all over the place.


| Thank you! The responses here are (as usual) overwhelmingly helpful. I think I learn more from this subreddit then I do from any where else. Thanks again! "	t5_2qi27	True
1335094175.0	smioj	Make_shared, almost a silver bullet	lanzkron	31	8	11		t5_2qi27	False
1334423775.0	s9o0r	"ANSI eStandards Store: INCITS/ISO/IEC 14882-2012 C++ (PDF, $ 
30)"	cmeerw	26	3	13		t5_2qi27	False
1334236013.0	s63n7	C++ at Facebook	Andrey_Karpov_N	39	21	13		t5_2qi27	False
1328727860.0	pglni	Herb Sutter: C++11, VC++11 and Beyond | GoingNative 2012	cosmotriton	24	2	1		t5_2qi27	False
1328688155.0	pg0cm	node.native - a C++11 port of node.js	berium	27	6	17		t5_2qi27	False
1314824258.0	k0l78	C++ and Beyond 2011: Benedict Gaster on C++11, C++ AMP, C++ Renaissance	Masfo	29	6	1		t5_2qi27	False
1309904715.0	ihkle	C++11 New Features Cross Reference	misuo	27	4	9		t5_2qi27	False
1309220311.0	iatj8	Writing a C library, part 1	gst	26	6	2		t5_2qi27	False
1307540219.0	hulsh	First BoostCon 2011 Videos available	hkaiser	25	1	0		t5_2qi27	False
1297279350.0	fi7ad	Armadillo: C++ linear algebra library	gabbriel	26	6	8		t5_2qi27	False
1296057071.0	f9ek6	Expressive C++: Expression Optimization - Eliminating the Abstraction Penalty	eric_niebler	33	9	20		t5_2qi27	False
1293041753.0	epzer	Is there any reason to use C++ instead of C, Perl, Python, etc? - Programmers - Stack Exchange	ehsan4	40	18	23		t5_2qi27	False
1290787917.0	ec3l0	C++ Dynamic Message Passing Ala ObjectiveC	axilmar	25	4	26		t5_2qi27	False
1285834717.0	dkwwj	ODB - compiler-based ORM for C++	gst	26	3	17		t5_2qi27	False
1276857879.0	cgcs6	The Four Polymorphisms in C++	pkrumins	33	12	4		t5_2qi27	False
1271543104.0	bsfrl	Metatrace: a C++ compile-time raytracer	int3_	26	5	10		t5_2qi27	False
1268374089.0	bced7	C++-201x Variadic Templates	gst	24	3	7		t5_2qi27	False
1262110531.0	ajm5z	A C++ addict needs advice (or your experience)	mebrahim	24	2	103	"I love C++ and I'm good at it. I have done almost all my projects using C++ till now. The only other language I use regularly is BASH. I've never felt ""_I need to learn X language_"". However I've tried few others by small scripts or so.

My problem is I've not implemented some types of projects yet. For example I've never created a real big web application. But every time I think about some software type, I see it doable in C++. For example for the web application case I tell myself ""_I can do it in Wt and that library for DB and ..._"" AND I hate wasting CPU cycles.

Actually I've not enough motivation to go after learning and using other technologies. I hear much about how amazing Python is, what a good experience it is to create a web app using Ruby on Rails, etc. But I just don't have enough motivation. The problem is I feel something might be wrong about this. Others are not like this!

Now I want to create a real web app. It is not rational to try all those told-to-be-great technologies, although I've been reading about many of them for years. How should I decide? Or should I continue using my mother computer tongue, C++?

Now what's your opinion?"	t5_2qi27	True
1247584139.0	9138u	User-friendly compile errors for templates in C++0x	gst	22	1	0		t5_2qi27	False
1239126651.0	8apqz	"References:  Do you code ""int&amp; i"" or ""int &amp;i""?"	luster	35	11	68		t5_2qi27	True
1239104493.0	8am7r	Can someone recommend a book or an online tutorial on the boost library?	joelthelion	23	1	22		t5_2qi27	True
1237385743.0	85lx0	New Herb Sutter article - Use Threads Correctly = Isolation + Asynchronous Messages	dmooney1	27	5	0		t5_2qi27	False
1233136031.0	7t0f3	Interview: Eigen Matrix Library - free C++ template math library	gst	26	5	0		t5_2qi27	False
1232447233.0	7r1gz	Uses for pointers to members in C++		29	6	1		t5_2qi27	False
1226345440.0	7cimj	C++ Standards Meeting Finalizes Feature-Complete Draft Standard	gst	25	4	5		t5_2qi27	False
1375431163.0	1jjxou	Using C++11 variadic templates to create a type-safe and injection-safe database interface: part 2	vinipsmaker	26	6	5		t5_2qi27	False
1374714483.0	1izw3g	RO — Range Operators	mttd	29	8	27		t5_2qi27	False
1373890479.0	1ic2l2	This time we will discuss virtual inheritance in C++ and find out why one should be very careful using it	Andrey_Karpov_N	29	7	18		t5_2qi27	False
1372486861.0	1harvz	Microsoft switches to annual VS releases, promises C99 features.	AceyJuan	29	8	4		t5_2qi27	False
1371739010.0	1gq8zj	Tales of C++ - Episode Five: Explicit is Better than Implicit	mttd	28	6	3		t5_2qi27	False
1370889619.0	1g27pl	Proof Of Concept: Re-implementing Qt moc using libclang	mttd	26	7	9		t5_2qi27	False
1370620173.0	1fv8v2	zen::Xml - Simple C++ XML processing using C++11	zhnmju123	28	8	12		t5_2qi27	False
1369766676.0	1f7qz8	Boost C++ Libraries &amp; GSoC: Seven proposals accepted	mttd	27	4	7		t5_2qi27	False
1368901355.0	1el61w	Coroutine Pipelines in C++	mttd	26	7	8		t5_2qi27	False
1364988304.0	1bkxmb	A look at C++14 and beyond: Papers Part 3	meetingcpp	28	6	16		t5_2qi27	False
1363342021.0	1accqi	Proposing the Rule of Five	milliams	24	4	7		t5_2qi27	False
1360610087.0	18bov5	C++ and Beyond 2012: Herb Sutter - atomic&amp;lt;&amp;gt; Weapons - Links within	Masfo	22	2	9	"[Video 1 of 2](http://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Herb-Sutter-atomic-Weapons-1-of-2)

[Video 2 of 2](http://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Herb-Sutter-atomic-Weapons-2-of-2)"	t5_2qi27	True
1359662352.0	17nbhs	Online C++ compilers : Standard C++	mttd	28	8	2		t5_2qi27	False
1358191222.0	16kepw	Update from the Ranges Study Group	milliams	29	7	8		t5_2qi27	False
1356028444.0	156gmj	Is C++11 uniform initialization a replacement for the old style syntax?	milliams	27	6	0		t5_2qi27	False
1354345434.0	143fhd	A Safe Alternative to Learn How to Capture by Move	jbandela	25	5	9		t5_2qi27	False
1349375670.0	10y67p	Functional sets in C++ (lambdas are cool!)	Okaram	28	9	9		t5_2qi27	False
1347459801.0	zrltb	Is there a less hacky way to execute code before main()?	wung	29	7	28	"    #define INITIALIZATION_TIME_CODE_EXECUTION_BEGIN namespace { static struct __ ## __FILE__ ## __LINE__ ## _static_initializer_code { __ ## __FILE__ ## __LINE__ ## _static_initializer_code()
    #define INITIALIZATION_TIME_CODE_EXECUTION_END } __ ## __FILE__ ## __LINE__ ## _static_initializer_code_instance; }
    
    INITIALIZATION_TIME_CODE_EXECUTION_BEGIN
    {
       scene_provider_registry::register_provider (new example_scene());
    }
    INITIALIZATION_TIME_CODE_EXECUTION_END

**Context:** registry for adding handlers to open files that is extensible on compile time with only adding a module, rather than modifying some startup code.

**Note:** expands to some really hacky use of RAII:
    
    namespace
    {
      static struct __file_cpp100_static_initializer_code
      {
        __file_cpp100_static_initializer_code()
        {
          scene_provider_registry::register_provider (new example_scene());
        }
      } __file_cpp105_static_initializer_code_instance;
    }

**Known issues:** line numbers don't match for begin and end. begin and end macros are ugly."	t5_2qi27	True
1345901457.0	yszgi	Can a near-zero floating value cause a divide-by-zero error?	cruise02	29	7	5		t5_2qi27	False
1345392607.0	yh59t	What exactly is bad code?	bijan311	33	11	56	I'm learning to program and I've heard others talk about bad code. My question is what are the characteristics of bad code so I can write the best code possible.	t5_2qi27	True
1345097145.0	yb2s5	Visual C++ in Visual Studio 2012	lanzkron	33	12	7		t5_2qi27	False
1343622839.0	xdjr4	A question about const correctness	Quintic	23	3	21	"I was reading effective c++, and in Item 3 (Use const whenever possible) he mentions that you should return const from operator*. Example:

    const Rational operator*(const Rational&amp; r1, const Rational&amp; r2);

This is to avoid things like

    a * b = c;

He specifically mentions that this is helpful in the oh too common error

    if (a * b = c)
        // Do stuff

However, I was wondering. Should you return const from any function which returns by copying?

I wrote up an example:

    std::string test1() {
        return ""hello"";
    }

    int test2() {
        return 2;
    }

    int main() {
        test1() = ""jello""; // No error
        test2() = 3; // error!

        return 0;
    }

By default the primitive type does not allow this kind of assignment, but std::string does not have an issue with it. To make the behavior consistent should test1() be redefined as 

    const std::string test1() {
        return ""hello"";
    }
"	t5_2qi27	True
1339788653.0	v3w5t	Visual Studio 2012 to support building for XP (in a post -RTM release)	devcodex	31	10	8		t5_2qi27	False
1337665526.0	tyund	Getting the most out of the C++ compiler	cosmotriton	28	5	4		t5_2qi27	False
1335963621.0	t379x	ceres-solver: A Nonlinear Least Squares Minimizer used by Google Street View	lingua_franca	27	7	0		t5_2qi27	False
1331646105.0	qui8i	After Accelerated C++; Before Effective C++.	lizardpunch	25	2	17	Is there a book I should read after Accelerated C++ and before Effective C++, or can I go directly from Accelerated to Effective?	t5_2qi27	True
1329409092.0	psfsn	Panel -&gt; Alexandrescu, Boehm, Carruth, Lavavej, Sutter, Sutton, Stroustrup: Ask Us Anything! | GoingNative 2012	cosmotriton	24	3	4		t5_2qi27	False
1328901551.0	pjqb4	Andrei Alexandrescu: Static If I Had a Hammer | GoingNative 2012	cosmotriton	24	3	10		t5_2qi27	False
1315859791.0	kdg0m	C++11 Concurrency Series [Part 3]	Masfo	26	7	0		t5_2qi27	False
1314439090.0	jw0pd	Ask C++: What is the correct way to go to implement multidimensional arrays in C++.	Xochipilli	26	6	30	"Hi,

I'm a CS student with Java, Python and Scheme experience, and just started to learn C++ in my free time.

Specifically I need a 2 dimensional array with different sizes that can easily be passed to different functions. 

My first taught was to do declare this as follows, with the a print function I used for testing.

    int grid [rows][columns];

    void print_grid (int **grid, int rows, columns) {
        std::cout &lt;&lt; ""print_grit:"" &lt;&lt; endl;
        for (int row = 0; row &lt; rows; row++) {
            for (int col = 0; col &lt; columns; col++) {
                std::cout &lt;&lt; (grid[row])[col] &lt;&lt; endl;
            }
        }
    }

    print_grid(grid, boardsize);

But this doesn't seem to work. I went to google to search how to implement a multidimensional array and I came upon many different suggentions, like using the *vector* class.

So what is the best way to implement an multidimentional grid/matrix/array?
    

*EDIT*: Thanks for the quick reply's =) , A vector of a vector it will be."	t5_2qi27	True
1307480016.0	hu1sa	Benign Data Races Considered Harmful		21	0	11		t5_2qi27	False
1297306012.0	fih0k	Worst practices in C++, common mistakes …	uriel	26	3	20		t5_2qi27	False
1284033113.0	dbjyj	Update on C++0x draft		24	3	3		t5_2qi27	False
1271603230.0	bsnkf	New features in Visual C++ 2010 (C++ language only)	gst	31	11	4		t5_2qi27	False
1271597032.0	bsmju	Wikipedia Articles with example C++ code	the-fritz	29	7	0		t5_2qi27	False
1258568928.0	a5qm1	Boost 1.41.0 available	joaquintides	24	4	2		t5_2qi27	False
1255016900.0	9s394	Project Archer is a GDB developing branch dedicated to improve GDB's C++ Support.	the-fritz	22	1	2		t5_2qi27	False
1252989498.0	9kmti	Ask /r/cpp/: Which web pages do you have open as a reference while coding C++?	stesch	27	5	34		t5_2qi27	True
1252046229.0	9h7ck	C++Next: The next generation of C++	joaquintides	31	11	14		t5_2qi27	False
1247314665.0	909i6	Elements of Modern C++: Lectures	_martind	23	3	0		t5_2qi27	False
1244476288.0	8qqww	C++ Soup!: Bloom Filters	gst	24	3	1		t5_2qi27	False
1241621243.0	8ibqc	Designing multi-threaded programs with C++0x (pdf slideshow)	last_useful_man	24	4	3		t5_2qi27	False
1220429489.0	6zdhd	C++ - It’s not all bad (pt. I) - In which we see why it’s easy to think that C++ *is* all bad	gst	32	11	13		t5_2qi27	False
1376486145.0	1kcgme	AMD releases APPML source code, creates clMath library	mttd	22	2	3		t5_2qi27	False
1376470586.0	1kc6kq	Clang: libc++ C++1Y Status page available	meetingcpp	25	5	0		t5_2qi27	False
1376156885.0	1k3k0e	"ACCU :: Overload Journal #116 - August 2013 // ""Portable String Literals in C++"", ""Dynamic C++ (Part 2)"", ""Auto - a necessary evil? (Part 2)"" &amp; more!"	mttd	23	1	0		t5_2qi27	False
1374665802.0	1iy7pq	c++11 regex support is poor, can't be used in cross platform text editing library	drac667	36	18	28		t5_2qi27	False
1374335271.0	1ip5vy	The Point Of No Return | Bulldozer00's Blog	mttd	32	12	19		t5_2qi27	False
1374189905.0	1ilfu0	C++’s best feature | Andrzej's C++ blog	mttd	32	12	2		t5_2qi27	False
1374087183.0	1ii5gz	Suggestions for improving the OpenCL C++ API?	mttd	22	3	15		t5_2qi27	False
1372937578.0	1hmmw6	Moving an Object Does Not Destroy The Original | Dr Dobb's	mttd	30	8	13		t5_2qi27	False
1372772324.0	1hhup2	Interfaces done right	meetingcpp	37	18	26		t5_2qi27	False
1371415694.0	1gh25i	Programming CUDA and OpenCL: A Case Study Using Modern C++ Libraries	mttd	30	9	2		t5_2qi27	False
1369212832.0	1etok3	Sole, a small C++11 library to generate UUIDs both v1 and v4	r-lyeh	27	7	7		t5_2qi27	False
1365016002.0	1bltnj	JetBrains adds fully fledged C++ support to AppCode aka Intellij Idea (xpost from /programming)	morricone42	29	8	11		t5_2qi27	False
1364397208.0	1b4383	Working with tuples part II	albinofrenchy	28	8	4		t5_2qi27	False
1362167043.0	19hagh	The Mandelbrot set in C++11	tompa_coder	30	8	2		t5_2qi27	False
1357663023.0	166uje	"Is there a complete and concise C++ and STL summary or ""cheat sheet""? "	pyfriend	28	6	19		t5_2qi27	True
1357104886.0	15t7uv	memoization in c++	Okaram	29	8	10		t5_2qi27	False
1356660706.0	15ju8c	HPX: a general purpose C++ runtime system for parallel and distributed applications of any scale	lingua_franca	26	7	9		t5_2qi27	False
1354493996.0	146aaw	Building, say, indices&lt;6,4,2,0,-2,-4&gt;	pgkreddit	21	1	0		t5_2qi27	False
1353614756.0	13mu4v	Rule of Zero @ Flaming Dangerzone	milliams	22	2	3		t5_2qi27	False
1352076671.0	12n2ek	Alignment support « The New C++	mttd	26	6	10		t5_2qi27	False
1351607296.0	12c77r	Value Semantics and Polymorphism | C++ Soup!	milliams	24	6	5		t5_2qi27	False
1350604752.0	11pwll	Stack-based template metaprogramming in C++ 	rexxar	25	5	0		t5_2qi27	False
1348757705.0	10kcqa	C++11 Tutorial: Let Your Compiler Detect the Types of Your Objects Automatically	wordsmithie	27	7	4		t5_2qi27	False
1347868074.0	100i39	Portable Stackless Coroutines in One Header	cmeerw	26	6	7		t5_2qi27	False
1346674177.0	z9zdf	Castor: a pure C++ header Library that introduces the Logic paradigm into C++.	lingua_franca	29	9	16		t5_2qi27	False
1344634540.0	y0npi	C++ and Beyond videos	Hyythac	30	8	4	Does anyone know whether the videos from C++ and Beyond 2012 will be available and if so when and where?	t5_2qi27	True
1342115778.0	wgb8l	Shared libraries in C++ under Linux	average_drifter	25	3	12	"Hello, 

I [read here](http://stackoverflow.com/a/497158) how I can make a shared library that exposes the implementation of a class.

And I can just compile with these:

    g++ -fPIC -shared myclass.cc -o myclass.so
    g++ class_user.cc -ldl -o class_user

The trouble are the create_object and destroy_object methods.
I mean, why can't I have my new and delete operators working ?
Or can I ? If so, how ?
 
Thanks,
An redditor

**UPDATE**: solved with the help of a colleague at work, the trick was to just -L. -lmyclass   and to forget all about extern wrappers and stuff. No -ldl needed. I needed a shared library, not dynamic, no plugins needed btw..
Thanks anyway.."	t5_2qi27	True
1341320159.0	vz5hv	Efficient argument passing in C++11, Part 3	berium	28	9	3		t5_2qi27	False
1340312509.0	veg9x	Does anyone know how C++11 implements threads? What is the cost of a call to std::async()?	MrWrinkles	27	5	5	I'm trying to understand how find grained I should be looking at in therms of a threading model. I know with pthreads the cost of spinning up a thread was high enough to look at a fairly course grained threading model and am curious as to if this has changed or if async uses some kind of pool to keep the costs low enough I can spin up a thread just to get through some work faster.	t5_2qi27	True
1339926770.0	v6ac4	struct is packed strangely 	Gefrierbrand	26	4	20	"I need a array of [True Color](http://en.wikipedia.org/wiki/High_color) pixel and for that I made myself a struct like this 

	#pragma pack(1)
	typedef struct {
		unsigned char R : 5; 
		unsigned char G : 5; 
		unsigned char B : 5;
		unsigned char A : 1;
	} high_color_t; 

Problem is that sizeof(high_color_t) yields 3! 
t
when I write my struct like that 

	#pragma pack(1)
	typedef struct {
		unsigned short R : 5; 
		unsigned short G : 5; 
		unsigned short B : 5;
		unsigned char A : 1;
	} high_color_t; 

sizeof yields 2. How come that? I am using clang. "	t5_2qi27	True
1339158775.0	urh66	C++ Standard Library: Utilities; 5.6. Compile-Time Fractional Arithmetic with Class ratio&lt;&gt;	gtani	27	5	0		t5_2qi27	False
1338757811.0	uj2j5	Folly: The Facebook Open Source Library	jobstijl	29	8	4		t5_2qi27	False
1337335068.0	tt2o9	Extracting Function Parameter and Return Types in C++	Andrey_Karpov_N	27	8	0		t5_2qi27	False
1336040775.0	t4wdk	C++11: Future Chaining For Easy, Highly Threaded Execution	cassandravoiton	30	10	13		t5_2qi27	False
1335841460.0	t0xyi	Graphics and Games	Angry_Giraffe	28	8	26	"I have been playing around in C++ for a little while now and have been only really been making command line programs. I was hoping to expand my knowledge and try making a small game but I currently have no clue to to use graphics in C++. I've been searching on google for some tutorials or something of the sort but most of the time I find people using game engines such as Unity to handle all that stuff.
I would really rather know how everything works before using a tool like that and I was wondering if any of you guys had any knowledge you could share with me on the topic or even just some tutorials that I could browse."	t5_2qi27	True
1333969002.0	s0mhf	Qt 5 moving away from C++ to JavaScript	berium	41	18	20		t5_2qi27	False
1331087756.0	ql3w4	Intel's take on parallel extensions to C++. They'll make it official in October 2012 (.pdf of slides)	protein_bricks_4_all	26	7	8		t5_2qi27	False
1330400458.0	q965a	C++11 multithreading tutorial – part 2	tompa_coder	23	5	2		t5_2qi27	False
1328373602.0	paqfz	Going Native 2012 Day 1: STL11: Magic &amp;&amp; Secrets	Masfo	24	4	5		t5_2qi27	False
1321216935.0	mb0gb	A bit old but very good read: _purecall and the Overhead of Virtual Functions	toruk	25	6	3		t5_2qi27	False
1320846858.0	m62k8	Did you pack that yourself? On expanding variadic template packs	lanzkron	23	4	5		t5_2qi27	False
1319488610.0	lnitv	C++11 Concurrency Series [Part 7]	Masfo	20	0	4		t5_2qi27	False
1319204243.0	ljw8y	C++ constexpr: substring checking at compile time	englabenny	23	3	12		t5_2qi27	False
1316302447.0	kj2eg	Google invests in native code for web	Wolfspaw	28	7	10		t5_2qi27	False
1308688394.0	i5kd6	Simple C++0x Walkthrough [video]		23	3	11		t5_2qi27	False
1308510769.0	i3qc5	What breaking changes are introduced in C++11?	foobarqux	25	5	0		t5_2qi27	False
1307869857.0	hxor8	The myth of signed arithmetic wraparound	gst	29	9	5		t5_2qi27	False
1297918427.0	fmzh0	What's the best book for systems programming specifically in c++? Like, one that uses c++'s advanced features and doesn't just use a bunch of c programs in .cpp files?		29	11	39		t5_2qi27	True
1295553455.0	f601j	How to get a more useful display of Boost type values in the Visual Studio debugger	eco_was_taken	22	2	5		t5_2qi27	False
1292869287.0	eovp2	Co-Routines in C++	dfarmernv	22	1	1		t5_2qi27	False
1290735881.0	ebutp	Picking up a C++ book. Any non-conventional books out there?		27	7	24	"I have 2 months before I start college, we take C++ in our second year so I have quite a while to get some concepts down, probably time enough for a project or two in the meanwhile.  
  
I'm familiar with programming and computers so I don't really need a completely newb book, I can program in JAVA/Python, I can 'code' (X)HTML/CSS/JS/.  
  
Anyone know of unique books that aren't just the standard chapter by chapter?"	t5_2qi27	True
1287055797.0	dr47h	STL / Move Semantics Benchmark	eric_niebler	21	1	1		t5_2qi27	False
1283282780.0	d7ujd	Expressive C++: Introduction	cmeerw	24	4	0		t5_2qi27	False
1282195735.0	d2w1k	Learning FC++: The C++ functional programming library	gst	28	6	4		t5_2qi27	False
1273515939.0	c28co	Parsing C++ with GCC plugins, Part 2	gst	23	2	0		t5_2qi27	False
1270658506.0	bnpx4	C++0x Compiler Support (Stdcxx Wiki)	the-fritz	21	1	14		t5_2qi27	False
1269684675.0	biy9j	[C++Next] This Week in Boost: Boost.Log library, Boost’s participation in the Google Summer of Code program, and general problems with Boost development.	the-fritz	23	4	0		t5_2qi27	False
1267833199.0	b9uf0	2006: ISO/IEC TR 18015: Technical Report on C++ Performance	tmsh	24	5	1		t5_2qi27	False
1263920506.0	arirj	Qt4 GUI Testing with Hooq	Drunken_Monkey	25	4	1		t5_2qi27	False
1259424897.0	a8zd1	google-ctemplate - A simple but powerful template language for C++	mebrahim	27	6	6		t5_2qi27	False
1253027796.0	9ksn7	I disagree with Linus Torvalds about C++ 	gst	51	29	14		t5_2qi27	False
1240634834.0	8fb43	An Introduction to Variadic Templates in C++0x	gst	23	3	2		t5_2qi27	False
1237882670.0	870j3	Sparse Sets with O(1) insert, delete operations and (sub)linear union, intersection	ultimate_progr	23	2	11		t5_2qi27	False
1233757524.0	7utak	GCC 4.3.3 Released	gst	24	4	3		t5_2qi27	False
1232305364.0	7qnes	 Better even at the lowest levels - Why might you prefer to write low-level code in C++ rather than in C? 	gst	26	6	4		t5_2qi27	False
1225051897.0	79hta	Who ordered rvalue references? Part 2 	gst	24	4	1		t5_2qi27	False
1219171657.0	6x1ef	The State of the Language: An Interview with Bjarne Stroustrup - C++ founding father assesses the language on the eve of its new standard.  	gst	23	2	4		t5_2qi27	False
1376654838.0	1khevz	C++ String to Int	Andrey_Karpov_N	21	3	11		t5_2qi27	False
1373475992.0	1i0o6y	How the C++ Compiler Decides to Move Objects	meetingcpp	26	6	0		t5_2qi27	False
1372515091.0	1hb6rh	The Future of C++ - Herb Sutter	graemedeacon	29	9	7		t5_2qi27	False
1370466868.0	1fqx2i	The World’s Simplest Lock-Free Hash Table | Preshing on Programming	mttd	27	7	1		t5_2qi27	False
1369786162.0	1f8gx3	GotW #89: Smart Pointers | Sutter’s Mill	mttd	20	1	9		t5_2qi27	False
1369254189.0	1euuyb	GotW #6a: Const-Correctness, Part 1 | Sutter’s Mill	mttd	23	5	6		t5_2qi27	False
1368692600.0	1efv3u	Coroutines in C++ using Boost.Coroutine	aiooua	28	7	21		t5_2qi27	False
1366767920.0	1czann	What do you use to write your code?	lumberjackpatty	26	8	116	I haven't coded sense high school and I don't remember what I used to use. Right now I have n++ but it doesn't have a compiler so I was hoping someone could tell me what is better to use. thank you!	t5_2qi27	True
1364315216.0	1b1rf3	Dublication in Software	meetingcpp	28	9	11		t5_2qi27	False
1363807016.0	1aoj0x	New paper: N3580, Concepts Lite&amp;amp;#8212;Andrew Sutton, Bjarne Stroustrup, Gabriel Dos Reis	balkierode	25	7	0		t5_2qi27	False
1361814068.0	1979yd	Best online C++11 sources?	LovePeasant	23	3	10	"I have some free time coming up and decided it is time to bite the bullet and approach the new standard in some kind of systematic way.  I have no money for expensive computer books at the moment so any free sources would be greatly appreciated.

P.S. I am not really ""a read the standard"" kind of person.  A more expository approach is what I am looking for.

Thanks!"	t5_2qi27	True
1359500844.0	17ix26	The View from Aristeia: Effective C++11: Background	mttd	23	3	1		t5_2qi27	False
1358560292.0	16uqcp	Introducing C++ Order Relations | Dr Dobb's	mttd	29	9	3		t5_2qi27	False
1358366752.0	16pbrt	ffead-cpp: a c++ web framework, c++ application framework, c++ rest framework, c++ security framework and c++ soap framework all bundled into one.	lingua_franca	31	12	18		t5_2qi27	False
1354740357.0	14cbrr	Improving C++ Encapsulation with the Pimpl Idiom -- Visual Studio Magazine	mttd	26	6	8		t5_2qi27	False
1353438402.0	13it9p	scope(exit) in C++11	milliams	33	13	28		t5_2qi27	False
1353016457.0	139ged	Generalized Function Objects Explained (for the C++11 unfluent)	mttd	24	5	0		t5_2qi27	False
1352669328.0	130zbi	Generic Function Objects, or Generalizing Associativity, Transitivity, and such abstractions over functions and types	mttd	22	3	0		t5_2qi27	False
1350223291.0	11gkqt	C++11 timing code performance	tompa_coder	25	6	15		t5_2qi27	False
1348258927.0	109kus	FIX8: open source C++ FIX engine	lingua_franca	26	8	13		t5_2qi27	False
1345762084.0	ypzrs	"Unusual C++: if (arr&lt;:0:&gt; not_eq 0 and not false) &lt;% cout &lt;&lt; ""Valid C++""; %&gt;"	alexkorban	40	18	73		t5_2qi27	False
1343309223.0	x6s88	C++/Lua MVC web framework by a redittor	lingua_franca	23	6	4		t5_2qi27	False
1343136622.0	x2l9n	Stephan T. Lavavej: Core C++, 3 of n | Channel 9	Masfo	25	5	8		t5_2qi27	False
1341990765.0	wdi5l	C++ Mysteries	Andrey_Karpov_N	23	4	3		t5_2qi27	False
1341577250.0	w4jfz	What is an indeterminate rule in C++ ? How is it different from an undefined rule? - Stack Overflow	kbedell	24	6	5		t5_2qi27	False
1339695133.0	v1y2r	Scope Regions in C++	Andrey_Karpov_N	24	4	4		t5_2qi27	False
1338338289.0	uba0m	Should I burden users of my library with their own memory management and raw pointers or include inherent support for smart pointers?	danielnh	25	4	45	"Hi Guys. I'm writing a small library and I'm wondering whether to burden users with memory mangement or handle it on their behalf.


The jist of what I have is something like:


    IP4Address* IP4Address::GetFirstAddressInRange() {	
        ....
        IP4Address* _addr(new IP4Address(_addressString));
        _addr-&gt;netmask = this -&gt;netmask;
        return _addr;
    }



As you can see, it returns a raw pointer to a heap object of the same type, which then the programmer is responsible for deleting after they've finished with it. Would you encourage this? or would you return a smart pointer? 


The function's implementation in its entirety is at: 

https://github.com/thefossproject/LibIPvX/blob/master/ipv4address.cpp


It will assist me if you critique my code too - tear me in half if you will! :)



Thanks!"	t5_2qi27	True
1333973544.0	s0o99	Eight C++ programming mistakes the compiler won’t catch	Andrey_Karpov_N	35	15	55		t5_2qi27	False
1331930305.0	qzvzv	C++ Now! (BoostCon) Announces Schedule with C++11 Focus	JonKalb	19	0	3		t5_2qi27	False
1328586486.0	pe5y4	Going Native 2012 Day 1: Variadic Templates are Funadic	Masfo	22	3	0		t5_2qi27	False
1327845479.0	p1o95	Efficient Use of Lambda Expressions and std::function	bogado	23	2	13		t5_2qi27	False
1309570068.0	ieohg	How to go about doing c++ web/server dev?	underthesun	23	5	16	"Okay, so a little bit of a background : I'm largely an iPhone c++/opengl developer, and recently had the thought of putting some back-end capabilities to my games, so I developed a high score server in it. Kind of rudimentary, but it works.

But that got me thinking. If I want to go deeper and do c++ server developments more ""properly"", in what direction should I look for to get good scalability, reliability etc? I mean, what about authentication systems, sessions, cookies, httpd etc, what databases could be used well with c++ etc?

Normally you'd go with a language more suited for web dev (thinking java/php/c# etc), but since I've had so much more experience on c++, it could be better to just stick with it. On the other hand, it doesn't seem that c++ has that much support for web dev, or server applications dev in general. What's the actual situation?

Also, how does one scale a c++ server application? The same way you scale other applcations in java etc : by proper design consideration? Or is there a magical tool that exist in these other languages that don't exist in c++?"	t5_2qi27	True
1309437036.0	id6vd	A Visual C++ x64 code generation peculiarity	gst	21	2	2		t5_2qi27	False
1302806253.0	gq3zy	What do you think of C++0x?		22	2	16		t5_2qi27	False
1300801431.0	g8xa0	Looking for alternative to Eclipse for C and C++ development.	Let_Me_Be	23	4	19		t5_2qi27	False
1294336399.0	exczt	Question about statements in c++	goishin	19	0	23	"Hey all, I got a question about statements. There's a bit of code we have at work that goes like this:

    do{
      //some bit of code
    }while(0);

And apparently this is superior to just scoping the bit of code you need inside braces because it makes the bit of code into an actual statement. What's the difference? Or a better question, what should I be looking for on google to learn more about this? I don't even know how to start looking this up.

Edit: Syntax"	t5_2qi27	True
1284356807.0	dd2mu	Expressive C++: Playing with Syntax	gst	25	6	4		t5_2qi27	False
1268608033.0	bdd48	What's the best tool for static checking standard coding rules in a c++ source?	nbonelli	22	3	11	I have been trying tools for static checking coding rules on large c++ projects. None of them is satisfactory. So far the best seems to be  cpplint.py that aims at checking for google styleguide. Is there something *better* out there?	t5_2qi27	True
1268527610.0	bd31e	Trip Report: March 2010 ISO C++ Standards Meeting (C++0x feature-complete!)	great-pumpkin	24	5	1		t5_2qi27	False
1267675579.0	b907r	2010-02-16 draft of C++0x standard (free + legal)	last_useful_man	27	7	6		t5_2qi27	False
1257354487.0	a0xte	Boost 1.41.0 beta 1 is available	joaquintides	23	4	7		t5_2qi27	False
1244784124.0	8rvnc	std::array: The Secure, Convenient Option for Fixed-Sized Sequences	gst	24	4	4		t5_2qi27	False
1233884340.0	7v8uv	Qt 4.5 Release Candidate Available	mebrahim	21	4	0		t5_2qi27	False
1233559451.0	7u6j9	C++ Soup!: Programming: Principles and Practice Using C++	gst	25	5	0		t5_2qi27	False
1225261837.0	7a0bp	Lambdas, auto, and static_assert: C++0x Features in VC10, Part 1	gst	27	9	3		t5_2qi27	False
1222162008.0	72zkt	How inheritance, encapsulation and polymorphism work in C++?	gst	24	5	1		t5_2qi27	False
1215666266.0	6r2gm	The Long Road Back to C++	gst	22	2	0		t5_2qi27	False
1376346234.0	1k8k4g	Functional Programming in C++ « Carl Gibbs	mttd	28	9	4		t5_2qi27	False
1373990982.0	1if5il	An introduction into Qt (Part 1)	meetingcpp	25	7	0		t5_2qi27	False
1373667180.0	1i6m5c	Stroustrup receives awards in St. Petersburg | Upsilon Pi Epsilon's ABACUS Award | The 37th ACM International Collegiate Programming Contest (ICPC)	mttd	25	7	2		t5_2qi27	False
1373535012.0	1i2k8c	Intercepting HTTP Request/Response using C++ Rest HTTP Library	meetingcpp	23	5	0		t5_2qi27	False
1372400194.0	1h8f8s	Beginning Template Meta-Programming: Introducing meta-functions	Crazy__Eddie	21	2	0		t5_2qi27	False
1371554060.0	1gktmp	Atomic vs. Non-Atomic Operations	mttd	22	3	0		t5_2qi27	False
1370294818.0	1flw7z	Unit Testing: Are there any solutions that are header only, and do not rely on the preprocessor?	zzing	22	4	10	"
I have started doing testing of my code, and after some contemplation started using 'catch' because it was header only and is easy to work with.

That said, I have noticed some movement away from the preprocessor where it is possible because of the new facilities available since the 98 standard and even more so now. 

So has anyone implemented a unit testing package that does not require the use of macros?"	t5_2qi27	True
1370120497.0	1fhe0t	ZipLib, the lightweight C++11 library for working with ZIP archives [x-post from /r/programming]	wbenny	34	15	18		t5_2qi27	False
1369942346.0	1fctav	Copying Container Elements From The C++ Library: It's Trickier Than It Looks | Dr Dobb's	mttd	28	11	0		t5_2qi27	False
1368056570.0	1dysmp	Is it possible to stop a program from the command line and have it finish some tidying up commands?	Gswindle76	25	7	16	"Lets say I'm running a c++ program that calculates the Fibonacci sequence ( 1 1 2 3 5 8 13 ... ), and I want to calculate up to 15000 digits.  This will take several days and I don't want to run it constantly.  I also don't care about the number itself but the the count of the digits in each number (f7 = 13 and has 2 digits).  But if I stop the program I need to save the last to numbers in a file to continue to calculate, after I restart the program. I don't want to write each number to a file as this will slow it way down.   I want to schedule this as cron job to run so I need to rely on a command line argument to stop the process

So to sum it up basically if I have a program called Fibonacci and I want to do this on the command line

me@localhost $ Fibonacci 
Calculating Fibonacci sequence ...

me@localhost $ Fibonacci stop
Saving f23286..... Saved
Saving f23287..... Saved
Exiting

me@localhost $"	t5_2qi27	True
1365053839.0	1bn7ps	Stop using strncpy already!	mttd	52	35	44		t5_2qi27	False
1363885837.0	1aqq9z	Introduction to the C++11 feature: extended friend declaration (C/C++ Cafe)	mttd	24	5	0		t5_2qi27	False
1363425807.0	1aeiea	New Paper: a parallel algorithms library for C++	meetingcpp	24	5	9		t5_2qi27	False
1362953219.0	1a1mmg	rikitiki - Build C++ web server modules that allow easy routing and deployment.	albinofrenchy	24	7	4		t5_2qi27	False
1362174591.0	19hjyb	It's Hard To Compare Floating-Point Numbers // Andrew Koenig | Dr. Dobb's	mttd	26	9	0		t5_2qi27	False
1360165787.0	1804ie	Closer to Perfection: Get to Know C++11 Scoped and Based Enum Types	nothingtolookat	32	13	7		t5_2qi27	False
1354905830.0	14gfol	Algocoders: New book series on using and extending C++11 and Boost	wichtounet	24	6	13		t5_2qi27	False
1354733552.0	14c3cx	Size matters, part 2 @ Flaming Dangerzone (a tuple with an optimal layout)	mttd	20	4	6		t5_2qi27	False
1352771658.0	133jjo	An Interview with Barbara Moo on C++11 |  | InformIT	mttd	27	7	8		t5_2qi27	False
1351108080.0	120ujy	Stephan T. Lavavej - Core C++, lecture 5 of n (Explicit and Partial Specialization of class and function templates.)	cosmotriton	22	6	0		t5_2qi27	False
1340844981.0	vprr7	Yet another SFINAE in C++11	keveman	25	5	4		t5_2qi27	False
1339005871.0	uoai2	C's New Ease of Use and How the Language Compares with C++	Andrey_Karpov_N	27	8	17		t5_2qi27	False
1336668104.0	tgomq	Finally an Qwt alternative: Qt plotting widget	sivic	28	9	8		t5_2qi27	False
1334564891.0	sc4pg	Wade not in unknown waters. Part three. Let's speak on shift operators &lt;&lt;, &gt;&gt;	Andrey_Karpov_N	25	6	2		t5_2qi27	False
1334239812.0	s669y	Mordor: a high performance event-based C++ I/O library	lingua_franca	23	6	8		t5_2qi27	False
1333551305.0	rsxwy	Introduction to Lock-free Programming with C++ and Qt	Andrey_Karpov_N	25	6	8		t5_2qi27	False
1333467065.0	rra3p	C++ programming pioneer hacks off-grid, DIY, smart home 	wordsmithie	33	15	3		t5_2qi27	False
1328608910.0	peiex	Going Native 2012 Day 2: A Concept Design for C++	Masfo	20	3	0		t5_2qi27	False
1315419126.0	k7tx3	CSI Stroustrup Interview Part 3: C++0x Technicalities and Intricacies		19	1	0		t5_2qi27	False
1314583151.0	jxiz6	A categorical view of covariance and contravariance in C++	flebron	21	4	12		t5_2qi27	False
1311616166.0	izcu5	Surprise! (You're relying on compiler-specific behavior)	machrider	24	5	2		t5_2qi27	False
1311007926.0	isxz7	Yet another C++ garbage collector.	axilmar	26	7	14		t5_2qi27	False
1308112327.0	i01cx	OOP in C++0x using lambdas instead of classes	radarsat1	27	7	10		t5_2qi27	False
1299565531.0	fzlb9	Nokia sells Qt commercial licensing	berium	25	6	3		t5_2qi27	False
1295018420.0	f2921	How Python affected my C/C++ brace style 	gst	39	20	24		t5_2qi27	False
1291723408.0	ehm1a	November 2010 C++ Standards Committee Mailing	gst	19	1	1		t5_2qi27	False
1288850347.0	e116f	Expressive C++: Fun With Function Composition	eric_niebler	18	0	11		t5_2qi27	False
1288299875.0	dxwtq	Optimizing C++	zzyzzyxx	25	8	10		t5_2qi27	False
1287503162.0	dtd5k	A Description of the C++ typename Keyword	terato	23	7	6		t5_2qi27	False
1280041970.0	ctffr	Open-methods (generic fns, multi-dispatch) for C++; 2007 paper by Bjarne Stroustrup (pdf)	secret_town	18	0	1		t5_2qi27	False
1278134453.0	cljq9	Standard Template Library (STL), 1 of n 	gst	24	5	2		t5_2qi27	False
1267460362.0	b7tug	"MILEPOST GCC is the first practical attempt to build 
a machine learning enabled open-source self-tuning 
(read optimizing) production compiler"		19	2	0		t5_2qi27	False
1257925289.0	a35qo	Solving ordinary differential equations in C++	gst	21	4	0		t5_2qi27	False
1251672665.0	9fnyy	"The first web framework and ORM for 
C++"	TouchIdeas	24	7	8		t5_2qi27	False
1242062998.0	8jln1	Compilers as a Commodity	gst	19	1	0		t5_2qi27	False
1238733575.0	89n36	Splay Trees in C++	ultimate_progr	21	2	4		t5_2qi27	False
1234943485.0	7ya9l	 Accelerating code using GCC’s prefetch extension	gst	20	4	0		t5_2qi27	False
1231057291.0	7n9ni	Performance: C# vs C++ - Revisted 	gst	24	6	4		t5_2qi27	False
1224749744.0	78uf9	The incomparable joy of C++ inner classes	gst	24	6	1		t5_2qi27	False
1223323296.0	75kcs	A modest STL tutorial	gst	22	4	0		t5_2qi27	False
1220082832.0	6yrof	Smart Pointers - What, Why, Which?	gst	24	4	-1		t5_2qi27	False
1212944982.0	6minx	Free e-book download: C++ GUI Programming with Qt 4, 1st edition (Zip with PDF)	JRepin	25	7	0		t5_2qi27	False
1375992148.0	1jz7vr	Some Optimizations Are More Important Than Others	mttd	25	10	4		t5_2qi27	False
1375556025.0	1jn03m	C++ REST SDK in Visual Studio 2013	mttd	26	9	6		t5_2qi27	False
1374845877.0	1j3ggt	C++ &amp; Pi	meetingcpp	31	13	27		t5_2qi27	False
1374016373.0	1ig4qp	F-Algebras and C++	meetingcpp	23	6	2		t5_2qi27	False
1373927671.0	1iddrx	Embedded in Academia : C-Reduce 2.1	mttd	18	2	0		t5_2qi27	False
1373044672.0	1hp7xf	Anti Pattern: the need to call a function	meetingcpp	30	11	12		t5_2qi27	False
1372170357.0	1h1eb2	Opinion on CodeBlock?	14Program	22	6	32	What is you opinion on CodeBlock?  What are some other IDEs/compilers that are good?  Link?	t5_2qi27	True
1371509963.0	1gjqqb	A C++ Reading List by John Lakos | InformIT	mttd	24	6	8		t5_2qi27	False
1370356163.0	1fnifa	Introduction to the C++11 feature: trailing return types	cmeerw	24	7	12		t5_2qi27	False
1365374975.0	1bvohu	GL++ (glpp) -- OpenGL C++ Wrapper	mttd	25	8	11		t5_2qi27	False
1364771968.0	1bdwf8	GDC Vault - Faster C++: Move Construction and Perfect Forwarding	mttd	22	5	2		t5_2qi27	False
1363722005.0	1am22k	Pre-Bristol standards papers mailing available!	meetingcpp	21	2	3		t5_2qi27	False
1363418983.0	1aefeb	If C++ had a mascot, what would it be?	matthewaveryusa	28	11	33	I think a flying monkey with Hermes/Mercury winged boots, a brick in one hand and a spatula with concrete dripping in the other would be quite good. Would definitely put snakes, rubies and birds to shame. 	t5_2qi27	True
1362231189.0	19irtc	Bind10: next generation of BIND, the most widely-used DNS server on the Internet	lingua_franca	23	5	3		t5_2qi27	False
1359152928.0	17a67b	If C++ Objects Are Unrelated, Are They Equal? | Dr Dobb's	mttd	21	3	3		t5_2qi27	False
1358464070.0	16s4ga	"HPX (High Performance ParalleX) 0.9.5 Released
        
            Standard C++"	hkaiser	21	4	0		t5_2qi27	False
1358005595.0	16fu0v	FastDelegate - does a variadic template C++11 version exist?	SuperV1234	24	6	17	"I've recently come across a very interesting and promising implementation of C#-like delegates for C++11, that claims to be faster (and, in my opinion, cleaner and more powerful) than boost::function (which is now std::function).

http://www.codeproject.com/Articles/18389/Fast-C-Delegate-Boost-Function-drop-in-replacement

It really looks amazing, but I wish there was a C++11 compliant version that uses variadic templates instead of all the preprocessor magic. I've googled around a lot, but I didn't find anything.

Does anybody know of a C++11 implementation? 
Is anybody interested in trying to implement it, if it doesn't exist?"	t5_2qi27	True
1355863270.0	152i8b	Concurrent Version of Embarrassingly Parallel Algorithms from &lt;algorithm&gt;	mrenaud92	19	3	11	"Hey everyone, I've been watching this subreddit for a while but this is my first post. 

A little while ago I was playing around with the new concurrency stuff in the C++11 standard and wrote a few algorithms taking an iterator range, breaking it apart into *n* sub-ranges, where *n* is the number of threads available on the system and running the algorithm over each of these ranges (nothing new here). 

This worked nicely but unfortunately, it cluttered the code a little so I decided to abstract all of the concurrency work away so one just has to write what algorithm should be applied to the sub-ranges and how to combine these to get the final result. For example, for `std::count`, you would call `std::count` on the sub-ranges then `std::accumulate` on the results of the pieces, ie. map and reduce.

After this, I decided to implement a portions of `&lt;algorithm&gt;` and it turned out to be quite straightforward to accomplish :) Anyways, the code is [here](https://github.com/mrenaud92/cxx-utils/blob/master/concurrent/algorithm.hxx), let me know what you think."	t5_2qi27	True
1354073201.0	13wwuh	The Importance of Function Objects	mttd	21	4	1		t5_2qi27	False
1352337501.0	12tyao	Integer Linear Time Sorting Algorithms in C++	wichtounet	21	6	12		t5_2qi27	False
1349872897.0	118yy7	C++11 Idioms @ Silicon Valley Code Camp 2012	cmeerw	23	8	13		t5_2qi27	False
1346607352.0	z8jz0	Building Cling (the C++ interpreter) on Windows	tompa_coder	24	8	3		t5_2qi27	False
1346081587.0	ywo0i	C++ Templates: What is a variadic template function?	cmeerw	24	8	10		t5_2qi27	False
1345297426.0	yfe73	Flash Runtime C++ Compiler (flascc) | Adobe Gaming	mttd	31	14	21		t5_2qi27	False
1344909980.0	y6gwk	Norvig's Python Sudoku solver ported to C++11	keveman	29	13	22		t5_2qi27	False
1344237242.0	xr7f8	Perfect Forwarding of Parameter Groups in C++11	sutambe	26	10	27		t5_2qi27	False
1342454507.0	wnct2	Roguelike game in C++ - Adding a map to the game	tompa_coder	31	15	3		t5_2qi27	False
1339257171.0	ut9l7	Create a working compiler with the LLVM framework, Part 1	Andrey_Karpov_N	26	8	0		t5_2qi27	False
1338947336.0	un5zz	Are there any free websites with C++ problems / solutions?	dragpent	24	7	10	"Greetings, doing some quick googling I wasn't able to find anything.

Are there any free websites where they present a problem, have you write the function or whatever (and potentially check whether or not it's correct) and then provide a solution to the problem?

I suppose something similar to: [1] http://turingscraft.com/ ?

Sorry if this question has been asked before, if it has please direct me to that thread.

Thanks for any information!

Posted already in cpp_questions to no avail."	t5_2qi27	True
1332856502.0	rfu5a	C++11 support in ODB	berium	20	3	3		t5_2qi27	False
1332244521.0	r4yn0	Delaying function signature instantiation in C++11	berium	22	4	5		t5_2qi27	False
1331589292.0	qtjaa	How to get Visual C++ 2012 (VC 11 Beta) statically linked CRT and MFC applications to run on Windows XP	cosmotriton	24	4	6		t5_2qi27	False
1331572399.0	qt4if	C++ Exceptions: Pros and Cons	roflmaoff	21	6	19		t5_2qi27	False
1329935640.0	q1854	"""typedef typename"": Please help me understand."	GeoKangas	23	7	6	"I'm always baffled and dismayed, when I see ""tyepedef typename ..."" in some code.  Why should one ever have to write ""typename"" immediately after ""typedef""?  Isn't the thing after ""typedef"" *always* the name of a type?

Please expand my intuition, so that I could intuit the answers such questions as:

1) When would omitting ""typename"" result in a compiler error?

2) When would omitting ""typename"" result in a error free compilation, but with unintended results?

3) &amp; 4) Same questions, but s/omitting/including/.

Thanks!
"	t5_2qi27	True
1324476813.0	nl93q	Not dead yet(?): A Breakthrough for Concepts «  C++Next	lanzkron	25	7	29		t5_2qi27	False
1320609635.0	m2ngp	Having it all: Pythy syntax for C++	rexxar	29	13	8		t5_2qi27	False
1320181550.0	lwv4l	C++11 lambda tutorial	tompa_coder	20	1	4		t5_2qi27	False
1318778153.0	le433	Compiling llvm, clang and libc++ on Linux - towards a better C++11 support	tompa_coder	20	4	8		t5_2qi27	False
1318394756.0	l97ju	Are You 100% Confident that Your Code is Exception-Safe? Exception-Safe Coding in C++	JonKalb	22	6	23		t5_2qi27	False
1311666869.0	izzjm	boost::scoped_ptr internals	pushingbits	18	2	1		t5_2qi27	False
1308275201.0	i1r3o	Herb Sutter: Heterogeneous Computing and C++ AMP (AFDS Keynote) 	gst	24	7	3		t5_2qi27	False
1304309851.0	h1x1s	The context sensitivity of C’s grammar, revisited	gst	22	3	2		t5_2qi27	False
1302187710.0	gkrgj	LLVM/CLang 2.9 released, claims rock-solid C++ support	berium	20	4	17		t5_2qi27	False
1301609995.0	gfvdk	Advanced STL, 3 of n		24	6	5		t5_2qi27	False
1300529851.0	g6zvb	Test-driven development and unit testing with examples in C++	gst	23	5	1		t5_2qi27	False
1299442792.0	fyjvu	Advanced STL, 2 of n		23	5	4		t5_2qi27	False
1297715020.0	flc6j	C/C++ Programming Podcasts	sazzer	20	4	2	"I've tried - and failed - to find some C/C++ podcasts to add to my listening list, so what, if any, C/C++ podcasts to people here listen to?

[Apologies if this is the wrong place to ask, but neither proggit or coding allow text posts it seems!]"	t5_2qi27	True
1296997062.0	fg9l6	An idea for higher performance numerical code in C++: expression templates and lazy code generation	bnikolictech	17	2	6		t5_2qi27	False
1295422970.0	f4zcr	Herb Sutter: “Coding, like Speaking a Language, Implies that You Think in that Language” 	gst	25	7	11		t5_2qi27	False
1294006887.0	ev3nv	Simple yet nice trick to have C# style enums in C++		21	3	13	"While waiting for C++0x
Been using this *stupid* trick for a while now and I'm enjoying it so much I thought I'd share.

Let's say we have this enum

    enum MyEnum
    {
        kOne,
        kSecond,
        kThird,
        kCount
    };

we would like to be able to write

    MyEnum value = MyEnum.kOne;

and hell, even have the value listed by Visual Assist or Intellisense (yeah right) when we type the name of the enum so we can choose from a list.

Well, it's as simple as wrapping it up in a namespace

    namespace MyEnum
    {
        enum e
        {
            kFirst,
            kSecond,
            kThird,
            kCount,
        };
    }

You must name the actual enum ""e"" because you may want to use this specific type like in:

    MyEnum::e value = MyEnum::kFirst;

So yeah... that is all. You get Visual Assist to list the possible values for a specific enum and visually in code you get a nice scope for it too.

Enjoy (?)


"	t5_2qi27	True
1291961508.0	eje6h	Are there any good intermediate to semi-hard practice problems out there you know of for c++?  I'm trying to get my skills back up because I haven't done any programming in cpp for a while.		17	0	42		t5_2qi27	True
1291265902.0	eewbv	Can you guys explain RAII to a guy who does embedded C programming?	-zorak-	18	1	30	I am, as the title implies, an embedded systems firmware guy, so most of my work is in C. I have taken some C++ classes and I feel like I have some of the basics down but one thing in particular that I am having some trouble with is RAII. I have read some articles from google searches on the topic as well as the wikipedia page, but I come away from those feeling like I am missing something. I have also tried to gain some insight into the concept by looking up ways it can be done in C, but they all seem to involve all manner of preprocessor/setjmp/longjmp voodoo and it isn't apparent to me why it is necessary (once again reinforcing the idea that I am missing something here). I appreciate any help you guys are willing to give. Thanks!	t5_2qi27	True
1277019048.0	cgyc1	Organizing code files in C and C++	MuhammadAdel	30	13	0		t5_2qi27	False
1259077877.0	a7pga	Using std::async for easy parallel computations	gst	18	3	4		t5_2qi27	False
1253749757.0	9nhfo	"Intel releases ""Concurrent Collections for C++ 0.4"""	rexxar	20	3	0		t5_2qi27	False
1253254174.0	9lqrh	Use C++0x's Inheriting Constructors to Reduce Boilerplate Code in Class Hierarchies	gst	21	4	3		t5_2qi27	False
1247996573.0	92jch	Visual C++ Team Blog : STL Performance	gst	21	3	1		t5_2qi27	False
1242369422.0	8knf9	C++09 Attributes: Specify Your Constructs' Unusual Properties	gst	19	2	7		t5_2qi27	False
1235085729.0	7ys6h	Wt, C++ Web Toolkit	mebrahim	26	8	1		t5_2qi27	False
1233682887.0	7uklq	Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin	gst	21	6	3		t5_2qi27	False
1227938941.0	7galq	C++ and the linker	gst	21	4	0		t5_2qi27	False
1224493893.0	7867p	Hidden Features of C++ - Stack Overflow	gst	25	7	1		t5_2qi27	False
1221051074.0	70o4e	Bjarne Stroustrup's Video Lecture on C++0x Standard	pkrumins	21	5	1		t5_2qi27	False
1217964771.0	6v0t0	Lock-Free Code: A False Sense of Security	gst	20	2	9		t5_2qi27	False
1376669161.0	1khtdp	Don’t be Afraid of Returning by Value, Know the Return Value Optimization	mttd	16	0	1		t5_2qi27	False
1376043377.0	1k0npz	Releasing Boost Dependency Analyzer 1.1	Andrey_Karpov_N	24	8	5		t5_2qi27	False
1373552366.0	1i2x87	Embedded in Academia : Finding Undefined Behavior Bugs by Finding Dead Code	mttd	18	2	7		t5_2qi27	False
1371934093.0	1gvgh9	Follow up to units: I wrote a tiny C++ units library a while back, and have fixed it up a bit.	Suppiluliuma_I	26	10	11	"Here is the link: https://github.com/MarkJr94/units

It is an SI unit library. There should be little performance overhead. It correctly performs unit multiplications (Newton x Meter = Joule) there are also literal operators for the seven basic SI units, as well as for radians.

It's a header only library so all the relevant code is  in units.hpp.

Advice, comments, and criticism please! I think it works nicely. "	t5_2qi27	True
1371901712.0	1guods	DLib 18.3 released	meetingcpp	22	6	5		t5_2qi27	False
1371683484.0	1gou7c	Checking whether a class has a member function with a given signature	mttd	27	11	17		t5_2qi27	False
1370305854.0	1fmamc	What’s up with TR1? (and C++11, and libc++)	mttd	22	7	18		t5_2qi27	False
1370116737.0	1fh9zb	Unicomm: a free open source multiplatform C++ framework that allows to create application level protocols over TCP transport.	lingua_franca	25	9	1		t5_2qi27	False
1369318796.0	1ewk1m	Tales of C++ - Episode Four: Not Enough Keys in the Keyboard	mttd	22	5	2		t5_2qi27	False
1367447399.0	1difn2	GTAC 2013: AddressSanitizer, ThreadSanitizer and MemorySanitizer -- Dynamic Testing Tools for C++	mttd	19	3	0		t5_2qi27	False
1365415277.0	1bwqlh	Conveniently-Declaring Compile-Time Strings in C++	wall_words	21	7	6	"I posted [this question](http://stackoverflow.com/questions/15858141/conveniently-declaring-compile-time-strings-in-c) on SO, since I was curious as to whether C++11 can be used to make compile-time string manipulation convenient. The utility of being able (conveniently) implement a compile-time EDSL has far-reaching applications. The two main problems that came up were the following:

1. The convenient initialization of compile-time strings.
2. The ability to produce new compile-time strings resulting from operations on existing ones.

Several people posted, and there's currently a several interesting ideas floating around as to how compile-time strings can be implemented. I haven't had the time to try out all of them, which is why I've held off on picking a solution."	t5_2qi27	True
1364683061.0	1bbquw	Faster Recursive Template Compilation	albinofrenchy	17	1	0		t5_2qi27	False
1361037581.0	18n9x4	"My C++11 ""Move"" Notes // Bulldozer00's Blog"	mttd	30	13	2		t5_2qi27	False
1359507520.0	17j4q0	The top 5 in the qualifying round of the Facebook Hacker Cup (correct answers, best time) all used C++.	notlostyet	29	11	16		t5_2qi27	False
1359161593.0	17agci	Jx9 - An Embeddable Scripting Engine for C/C++ host applications with purposes similar to Lua	symisc_devel	24	8	20		t5_2qi27	False
1358991642.0	175uey	The View from Aristeia: Effective Effective Books	mttd	20	4	0		t5_2qi27	False
1355936834.0	1546y2	Using constexpr to Improve Security, Performance and Encapsulation in C++	CrankyBear	25	10	4		t5_2qi27	False
1354709583.0	14bi0y	Videos for the LLVM 2012 developer meeting	ManicQin	21	4	4		t5_2qi27	False
1353685318.0	13o4ld	Simple way to load code at runtime via Plug-ins	jecxjo	20	5	15		t5_2qi27	False
1353673123.0	13nxwe	Compile time loops in C++11 with trampolines and exponential recursion	fnedrik	19	4	8		t5_2qi27	False
1352856956.0	135mwr	C++ Template Brainfuckery | rfw’s blog	mttd	22	6	5		t5_2qi27	False
1351426302.0	127slt	Yet Another Programmer's Blog: fmap in C++	mttd	21	5	12		t5_2qi27	False
1350473844.0	11mipx	A database of errors detected by PVS-Studio is available on website 	Andrey_Karpov_N	45	28	3	"We have gradually collected a large error database. The reports on these errors were, of course, published in the corresponding articles and the projects' authors are aware of them. At least, we did everything we could to inform them. But we also added the bugs into our internal database. Now this [database of errors detected by PVS-Studio](http://www.viva64.com/en/examples/) is open to the public.

**Collection can be used by you for the research, writing articles, studying typical programming errors and so on.**"	t5_2qi27	True
1349611410.0	1131yk	“Dynamic C++” Presentation Slides  |  POCO C++ Libraries Blog	mttd	18	4	5		t5_2qi27	False
1347999626.0	103i6d	C++ and Beyond 2012: Alexandrescu, Meyers and Sutter - Ask Us Anything | Channel 9	cosmotriton	25	8	16		t5_2qi27	False
1344266961.0	xrove	C++11 Tutorial: Introducing the Move Constructor and the Move Assignment Operator	wordsmithie	28	10	8		t5_2qi27	False
1339159386.0	urhhs	Basic source-to-source transformation with Clang	gtani	21	5	0		t5_2qi27	False
1337473144.0	tvd4g	C++ String Toolkit Library	ArashPartow	27	12	20		t5_2qi27	False
1337260260.0	trl6j	ACCU Overload Journals: tons of great articles	lingua_franca	22	6	0		t5_2qi27	False
1336907917.0	tkulm	Option types in C++11: Using the C++ type system to statically ward against NULL pointer dereferences.	simonask	21	4	34		t5_2qi27	False
1333430111.0	rqsae	If your software matters, you will write it in C++	Andrey_Karpov_N	58	41	37		t5_2qi27	False
1331492085.0	qrrw1	Rvalue references in constructor: when less is more	cmeerw	21	4	7		t5_2qi27	False
1326662826.0	oidkg	Why is 'X x; x();' allowed, when 'X' defines a conversion to function pointer, but not, when it defines a conversion to a functor?	daknok	23	7	3		t5_2qi27	False
1324067914.0	nfk6n	"wxWidgets 2.9.3 Released. Among the new features: wxWebView control and supporrt for 64 bit GUI applications under OS X
"	kannibal	24	8	9		t5_2qi27	False
1320021968.0	lulri	Why do some people name structures LIKE_THIS?	dennyyy	19	2	36	"Is it good style?

"	t5_2qi27	True
1319405835.0	lme37	C++ Book recommendation	rewritingmyself	19	2	17	"Hello,

I've read some of the Scott Meyers books (Effective C++, More 	Effective C++, Effective STL). I'm planning to start reading a new book but I'm not able to pick one yet, so maybe you guys can help on this :

Here are the options :

-Professional C++ ( includes references to new standard, that's a plus for me)

-Exceptional C++

-More Exceptional C++

-Modern C++ Design

-C++ Template Metaprogramming

In the other hand, feel free to recommend something that is not in the list and you think it might be worth.

Many thanks."	t5_2qi27	True
1316642526.0	kn7j1	Boost was meant ot be getting a logging library last year... whatever happened to it?	easytiger	19	3	25		t5_2qi27	True
1315813613.0	kcvbj	PVS-Studio: analyzing ReactOS's code (or  tabs vs spaces)	Andrew_X2011	28	11	5		t5_2qi27	False
1307093381.0	hqnvn	Advanced STL Lectures, Part 5: the Boost Library 	gst	19	3	0		t5_2qi27	False
1306863135.0	hod7o	Implementing a True realloc() in C++	gst	26	10	22		t5_2qi27	False
1306040062.0	hh4px	What Every C Programmer Should Know About Undefined Behavior #3/3	gst	22	7	0		t5_2qi27	False
1305619561.0	hd84x	Boostcon: Day 1 	gst	18	3	3		t5_2qi27	False
1304186820.0	h0xgn	Entangled_ptr: on the tension between pointers and move semantic	nbonelli	18	2	7		t5_2qi27	False
1301457611.0	geghx	GCC 4.6, LLVM/Clang 2.9, DragonEgg Five-System Benchmarks	secret_town	22	6	1		t5_2qi27	False
1297382411.0	fj3xn	C9 Lectures: Stephan T Lavavej - Advanced STL, 1 of n	ManicQin	20	3	0		t5_2qi27	False
1282653628.0	d4tlu	Template specialization vs. simply defining a constant... can someone elucidate this?	treerex	20	5	19	"I've come back to C++ after being away for four years or so. The code base that I'm working in contains some code like the following:

    struct period_tag {};
    template&lt;&gt; inline constant&lt;int32_t, period_tag&gt;::operator int32_t() const
      { return static_cast&lt;int32_t&gt;( static_cast&lt;unsigned char&gt;('.') ); }

    constant&lt;int32_t, period_tag&gt; const period;

This seems like a whole lot of noise when

    static const int32_t period = '.';

would suffice.

In all the cases I've seen, period is only used in comparisons.

What am I missing?
"	t5_2qi27	True
1280506172.0	cvjaj	Deleting From a C++ STL Collection is Hard.	alexs	25	8	8		t5_2qi27	False
1274588085.0	c768y	Recast - the OPEN SOURCE navigation mesh library created by Crysis' Lead AI Programmer.	Popenator	20	4	1		t5_2qi27	False
1262572064.0	al7od	Hans J. Boehm: Getting C++ Threads Right [Google talk]	Seele	19	2	2		t5_2qi27	False
1256931293.0	9zgyh	Handling out-of-memory conditions in C	gst	19	3	6		t5_2qi27	False
1255966451.0	9vjmd	C++ Customizations for Emacs 	gst	20	3	1		t5_2qi27	False
1251919211.0	9goev	Interesting Rant on C++'s operator new	damyan	26	10	17		t5_2qi27	False
1250227595.0	9aj1d	C++0x Forward Enum Declarations Cut Down Compilation Time and Dependencies	gst	18	3	4		t5_2qi27	False
1246159968.0	8wb7f	Update: STL vs Gnulib Performance 	gst	24	8	0		t5_2qi27	False
1236925361.0	84bau	Sequence Constructors Add C++09 Initialization Syntax to Your Homemade Classes	gst	16	2	1		t5_2qi27	False
1234639283.0	7xf8k	It has been a while since I last tried out Eclipse CDT.	gst	19	3	2		t5_2qi27	False
1234423014.0	7wsej	C++ Soup!: Auto-Vectorization and C++	gst	19	4	7		t5_2qi27	False
1232697242.0	7rtza	 Can an LGPL Qt give C++ a lift?	gst	21	6	2		t5_2qi27	False
1228208818.0	7gtsz	C++ atomics and memory ordering	gst	21	3	0		t5_2qi27	False
1225777070.0	7b6cd	Who ordered rvalue references? Part 3 	gst	21	5	0		t5_2qi27	False
1376598990.0	1kfxrc	An Important Move Optimization Is Nearly Invisible	cierpuchaw	20	3	1		t5_2qi27	False
1376511075.0	1kddbf	openFrameworks 0.8.0 is out!	mttd	21	5	1		t5_2qi27	False
1376343244.0	1k8fx9	GotW #94 Solution: AAA Style (Almost Always Auto)	mttd	19	3	1		t5_2qi27	False
1375559272.0	1jn3hd	Tales of C++ - True Story: I Will Always Find You // customization points	mttd	21	6	0		t5_2qi27	False
1375309804.0	1jgbmg	HPX V0.9.6 Released | The STE||AR Group	hkaiser	20	4	1		t5_2qi27	False
1372351282.0	1h6r85	Moving and Rvalue References | Dr Dobb's	mttd	19	5	0		t5_2qi27	False
1372264501.0	1h47qi	Herb Sutter: “The Future of C++.” //build/ talk on Friday @ noon PDT (webcast)	mttd	24	10	11		t5_2qi27	False
1372089480.0	1gz3dq	13 Linux Debuggers for C++ Reviewed | Dr Dobb's	mttd	26	13	9		t5_2qi27	False
1371205946.0	1gbwtc	The JUCE library core module is now permissively-licensed	jules1972	25	9	42		t5_2qi27	False
1370901089.0	1g2ous	Regular Expressions 101: Regex in C++11 | InformIT	mttd	18	4	0		t5_2qi27	False
1370560747.0	1ftqwo	Low-Fragmentation, High-Performance Memory Allocation in Despair Engine	mttd	18	4	0		t5_2qi27	False
1369075062.0	1epjp3	GotW #5: Overriding Virtual Functions | Sutter’s Mill	mttd	21	4	5		t5_2qi27	False
1368450203.0	1e8ppb	GotW #2 Solution: Temporary Objects	nikbackm	21	4	0		t5_2qi27	False
1368227080.0	1e3k61	Cache efficient programming questions	POGO_POGO_POGO_POGO	19	5	16	"Questions:  

* Does anyone know of any good free c++ profilers for analysing cache misses and the like?
* Is there any slowdown/speedup associated with read-only memory in registers, as opposed to read-write memory?

Sorry if my terminology is a bit off. I'm new to this. 

EDIT: I have vector of structs. My algorithm traverses over the vector reading some fields of the struct and writing to others. I'm wondering if it would be any more efficient if I spilt my vector up into two; one for read-only data, and the other write-only. "	t5_2qi27	True
1368117854.0	1e0da0	GotW #2: Temporary Objects (5/10)	mttd	20	5	3		t5_2qi27	False
1367010121.0	1d6fj3	[Visual Studio] NuGet for C++	mttd	23	6	5		t5_2qi27	False
1366933652.0	1d4ads	Functional Patterns in C++	liesperpetuategovmnt	20	3	0		t5_2qi27	False
1364507776.0	1b7c6l	"Preface to Bjarne Stroustrup's ""The C++ Programming Language, 4th Edition"" | InformIT"	mttd	24	7	4		t5_2qi27	False
1363399184.0	1adypn	New paper (tutorial): N3551, Random Number Generation in C++11—Walter Brown : Standard C++	mttd	19	4	2		t5_2qi27	False
1363171307.0	1a7iug	New paper: N3576, SG8 Concepts Teleconference Minutes, 2013-03-12	milliams	19	2	1		t5_2qi27	False
1362749796.0	19ws4x	Crypto primitives in C++ (using OpenSSL)	aiooua	20	5	1		t5_2qi27	False
1362596270.0	19sh3s	How do you determine the fastest linking order?	machine_not_a_human	26	11	0		t5_2qi27	False
1359129345.0	179csj	Thread Safe Template Library (TSTL): a C++ library that provides thread-safe containers with high grade of locking.	lingua_franca	22	5	4		t5_2qi27	False
1358892144.0	172xtw	I know this is gonna sound lame, but how does someone go about getting experience in C++ to get a job as a programmer?	wonderweirdo	25	9	14	"Take it easy on me, I'm not really familiar with what's going on in the programming community.  

I went to one of those for profit schools and took basic and advanced classes for C++, but had to take care of other things for a long time before I could return to any actual computer work.  By now I've forgotten most of what I learned because I never had a chance to use it.  I'm brushing up on my skills, going over the basics.  I've been looking for some kind of entry level work to switch from what I'm doing (help desk) into programming, but a lot of the job postings I find are asking for experience.  

Catching up is one thing, but I have no idea where to look to get experience.  Can someone just draw me a map of what employers are looking for in new programmers and how I can develop my skills for a potential employer?"	t5_2qi27	True
1358094898.0	16hv2o	A common misconsception: the register keyword « Jens Gustedt's Blog	vinipsmaker	26	11	8		t5_2qi27	False
1357430285.0	1616lt	#AltDevBlogADay » C/C++ Low Level Curriculum Part 10: User Defined Types	mttd	20	3	1		t5_2qi27	False
1357054416.0	15rutn	caselib: ML-like pattern matching for C++	LeszekSwirski	20	5	5		t5_2qi27	False
1356046632.0	1571m9	"Facebook NYC Tech Talk - Jordan DeLong ""using cxx::types;"""	mttd	21	6	2		t5_2qi27	False
1353926625.0	13t2ua	"Microsoft Security Essentials / Windows 
Defender anti-virus kills Visual C++ 
preprocessor"	Degwin	31	16	8		t5_2qi27	False
1348046390.0	104n8m	Browsing C++ Source Code on the Web	milliams	23	10	7		t5_2qi27	False
1345535639.0	ykkvb	Fright - Scientific research based on uninitialized variables may produce interesting results	Andrey_Karpov_N	22	7	1		t5_2qi27	False
1345296759.0	yfdu8	#AltDevBlogADay » Cleaning bad code	mttd	19	5	0		t5_2qi27	False
1344003907.0	xmcfn	" Adobe Source Libraries (ASL).
Adobe Source Libraries(ASL): widely useful, leveraging and extending both the C++ Standard Library and the Boost Libraries."	lingua_franca	22	8	7		t5_2qi27	False
1343796603.0	xhoa2	Unexpected skip of a destructor	romanke	23	8	23		t5_2qi27	False
1342359408.0	wlc32	MSBuild for MinGW	DimoneSem	20	7	15	"Hi,

Recently I've decided to start work on development of solution, which would make it possible to use MinGW C++ compiler from MS Visual Studio. And I'm going to write several posts about the development ot this system.

Here is the announce: [MSBuild for MinGW (about the series)](http://cpp-sparkles.blogspot.com/2012/07/msbuild-for-mingw-about-series.html)

So I'm asking for several points:

* Is the idea of usage of MinGW from Visual Studio can be interested for anybody?
* Are the posts about its development may be interesting for anybody and worth posting here (or somewhere else)?
* As I'm not a native English speaker I cannot estimate the quality of my language, so, please, tell me if it is OK, not good or absolutely terrible.

EDIT: 
jbandela has mentioned, that there are commercial (though not too expensive) tools, which do signifincatly more, than proposed in my project. If anyone knows other similar solutions (either commercial or opensource), please, make me know in comments. Thanks."	t5_2qi27	True
1340153942.0	vaz08	Completed a c++ course, now what?	Ashbaernon	22	7	23	"I've just completed a C++ course and am now wondering where to go from here. I am struggling to think of a simple project that I can expand and incrementally improve my programming skills. I don't care if it is a unique idea or of it has been done to death. I just need ideas :)

Sympathy plea: I have been making LabVIEW apps for 6 years.

So throw me your ideas Reddit. Let's see what you've got.

~Ash"	t5_2qi27	True
1338837712.0	ukock	LINQ for C++, Native Rx (RxC), Meet Aaron Lahman	cosmotriton	26	10	12		t5_2qi27	False
1336421946.0	tbouj	ZeroBUGS - modular debugger for C/C++/D, including GUI and python scripting framework	lingua_franca	27	13	11		t5_2qi27	False
1335187943.0	so4id	An implementation of the Actor model for c++ (and pthreads).	axilmar	20	3	7		t5_2qi27	False
1333690821.0	rvwt6	What's New in VS11 for Native Development	Andrey_Karpov_N	24	9	13		t5_2qi27	False
1333639596.0	ruq0d	Question: What is everyone's favorite logging libraries?	wildcarde815	20	4	18	I'm trying to figure out what direction to go with re-factoring a project's logging structure.  I've worked with the logger system used in the Wt framework before and it's pretty great, but I don't want to link against Wt just to get a logger.  Currently I'm between using boost.log and googles glog, but I'd like to know what others prefer to use for their work.  I suspect overall I'm a bit spoiled by being used to the python logging framework which makes it trivial to do things in a thread friendly manner and tweak the output style (std,stderr,files, etc.).  I'm not looking for a direct comparison but rich and stand alone would be fantastic.	t5_2qi27	True
1331068731.0	qkoig	The view from C++ Standard meeting Feb 2012	cmeerw	19	4	3		t5_2qi27	False
1324502256.0	nlpy2	When and where do you prefer pointers over references or straight values?	zzing	17	4	41	"I am designing a library similar in concept to what GLUT does.

I have been using references as much as possible because it guarantees that the object in question is not null.

I have observed though that some of the problems I occasionally run into would not exist with pointers.

So I ask you, what general guidelines does a modern C++ (11) programmer use to decide about these things?"	t5_2qi27	True
1323693633.0	n9lhl	Looking for most practical/used C++ idioms (preferably C++/11)	utnapistim	18	2	37	"I am looking for C++ idioms and correct (painless) usage of C++. I've used [RAII](http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization) for a while now and I've recently learned about [copy&amp;swap](http://en.wikibooks.org/wiki/More_C++_Idioms/Copy-and-swap).

What are the idioms you consider the most useful in practice and what problems do they solve?"	t5_2qi27	True
1322986679.0	mzl6h	Socket Programming.	Lamez	19	6	19	"I am interested in learning a few new things. When I want to learn something new, I use Rock, Paper, or Scissors. My goal this time is to write RPS allowing for people to play across networks. I have looked up some socket programming tutorials and they don't seem to help out much. 

Anybody know of an excellent place to learn about sockets or threads, or what-have-you. I am talking about beginner stuff.

Thanks for the help guys!"	t5_2qi27	True
1322126707.0	mnrbt	C++ Spring: GoingNative, Feb 2-3, 2012 (C++ conference, $112 at MS in Seattle)	last_useful_man	22	5	8		t5_2qi27	False
1321983406.0	mlnnt	C++11 Concurrency Series [Part 9]	Masfo	18	3	4		t5_2qi27	False
1319556034.0	logs3	Is C++ becoming more and more relevant in the coming decade?	pongba	17	0	12	"Herb Sutter in his ""Why C++"" keynote in C++ &amp; Beyond listed key trends in the coming decade that will put C++ back to the top of programmer's language-of-use list. The trends are cloud&amp;datacenters, mobiles&amp;tablets, which means the following vital constraints for language-of-choice: #1 Power Consumption, #2 Size, #3 Battery Life, #4 Responsiveness (e.g. fast and fluid UI experiences), and Herb sums it up in the following terms: Perf/Watt, Perf/Transistor, Perf/Cycle."	t5_2qi27	True
1318907243.0	lfw4o	C++11 Concurrency Series [Part 6]	Masfo	17	3	7		t5_2qi27	False
1314290763.0	ju66n	GoingNative 1: VC++ vNext, CRT, C++ and Beyond	Masfo	22	9	11		t5_2qi27	False
1314232990.0	jtht5	"The view (or trip report) from the Aug 2011 C++ Standard Meeting at 
Blomington IN"	cmeerw	17	3	0		t5_2qi27	False
1311656896.0	izw5z	Everything about C++ source code static analysis 	gst	22	6	1		t5_2qi27	False
1309886573.0	ihbh1	C++ Podcasts	MishkaEchoes	19	3	3	"Looking for C, C++, C++0x podcasts with emphasis over performance, and design/architecture/agile advancements with the occasional platform oriented development.

Not a podcast but a good start http://skillsmatter.com/podcast/agile-testing/kevlin-henney-rethinking-unit-testing-in-c-plus-plus"	t5_2qi27	True
1309391377.0	icrcc	C++ Renaissance at Microsoft		17	2	12		t5_2qi27	False
1308382492.0	i2sz7	C++ AMP recording and slides	gst	18	5	0		t5_2qi27	False
1307592169.0	hv89o	TechEd 2011: Modern Native C++ Development for Maximum Productivity 	gst	19	5	0		t5_2qi27	False
1307543174.0	humwe	CERT C++ Secure Coding Standard		17	1	0		t5_2qi27	False
1307463066.0	httsh	Herb Sutter: AMA C++ Questions and Answers		18	3	19		t5_2qi27	False
1305832860.0	hf9xy	Advanced STL, 5 of n	Masfo	20	5	0		t5_2qi27	False
1302357472.0	gm5ol	cpp-netlib 0.9-beta Out Now! - After months and months of delays, finally the 0.9-beta version of The C++ Network Library project is out now. 	gst	16	2	2		t5_2qi27	False
1302096704.0	gjw3s	Performance of ODB C++ ORM vs C# ORMs	berium	20	5	2		t5_2qi27	False
1300329301.0	g5l93	Automatic memoization in C++0x	rexxar	19	5	4		t5_2qi27	False
1297612739.0	fkkxo	W00t W00t Nix Nix! (C++Next)	bsdnerd	17	2	3		t5_2qi27	False
1295873995.0	f81ep	Consequences of using the Copy-Paste method in C++ programming and how to deal with it 	gst	26	10	1		t5_2qi27	False
1290631951.0	ebarq	Mad Software: Exceptions are Faster	mrmcgibby	22	5	23		t5_2qi27	False
1290154181.0	e8k0d	Regular Expressions - Video Introduction to the STL, Part 8 	gst	19	3	0		t5_2qi27	False
1284076079.0	dbuam	BoostCon 2010 Presentation Materials	rexxar	15	1	0		t5_2qi27	False
1274735323.0	c7obg	Only 3 days left for C++0x Comments!	the-fritz	20	6	2		t5_2qi27	False
1271126611.0	bq2n8	Qi-Make: A Link-Smart Build Tool for C/C++	gilbertchen	19	6	4		t5_2qi27	False
1270616374.0	bngo9	Thinking Asynchronously in C++: System error support in C++0x - part 1	gst	18	4	3		t5_2qi27	False
1264452926.0	au1w4	Source code for Cfront the first C++ Compiler (developed by Stroustrup at AT&amp;T)	the-fritz	18	3	5		t5_2qi27	False
1257236962.0	a0fvm	Just wanted to let you guys know, I've been using the gold linker for a year now, and it's been a bliss	joelthelion	20	7	6		t5_2qi27	False
1257126683.0	a000h	C++ memory model talk [Google Video]		22	7	2		t5_2qi27	False
1247996042.0	92jb8	c++ blogs that you regularly follow? - Stack Overflow	gst	19	2	2		t5_2qi27	False
1222192559.0	732os	Scott Meyers: Enforcing Code Feature Requirements in C++	gst	22	6	2		t5_2qi27	False
1221163329.0	70ylb	 make alternative for small C/C++ projects	gst	18	2	1		t5_2qi27	False
1220663171.0	6zxqh	"Alexander Stepanov (STL guy): ""Elements of Programming"". draft, chapters 1-5 [pdf]"	the-fritz	19	4	0		t5_2qi27	False
